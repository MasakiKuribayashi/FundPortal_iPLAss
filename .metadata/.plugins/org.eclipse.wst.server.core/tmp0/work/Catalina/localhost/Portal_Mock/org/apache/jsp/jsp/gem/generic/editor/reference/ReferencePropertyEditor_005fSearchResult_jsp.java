/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-28 07:43:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.generic.editor.reference;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.StringWriter;
import java.util.Map;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.ViewUtil;
import org.iplass.gem.command.generic.detail.DetailViewCommand;
import org.iplass.mtp.ManagerLocator;
import org.iplass.mtp.entity.Entity;
import org.iplass.mtp.entity.definition.EntityDefinition;
import org.iplass.mtp.entity.definition.EntityDefinitionManager;
import org.iplass.mtp.entity.definition.PropertyDefinition;
import org.iplass.mtp.entity.definition.properties.ReferenceProperty;
import org.iplass.mtp.impl.web.WebResponseWrapper;
import org.iplass.mtp.view.generic.EntityViewUtil;
import org.iplass.mtp.view.generic.ViewConst;
import org.iplass.mtp.view.generic.editor.NestProperty;
import org.iplass.mtp.view.generic.editor.PropertyEditor;
import org.iplass.mtp.view.generic.editor.ReferencePropertyEditor;
import org.iplass.mtp.view.generic.editor.ReferencePropertyEditor.ReferenceDisplayType;
import org.iplass.mtp.view.generic.editor.StringPropertyEditor;
import org.iplass.mtp.view.generic.editor.StringPropertyEditor.StringDisplayType;
import org.iplass.mtp.util.StringUtil;
import org.iplass.mtp.web.template.TemplateUtil;

public final class ReferencePropertyEditor_005fSearchResult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


	boolean isDispProperty(PropertyDefinition pd, NestProperty property) {
		if (property.getEditor() == null) return false;
		return true;
	}

	String getDisplayPropLabel(ReferencePropertyEditor editor, Entity refEntity) {
		String displayPropName = editor.getDisplayLabelItem();
		if (displayPropName == null) {
			displayPropName = Entity.NAME;
		}
		return refEntity.getValue(displayPropName);
	}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(30);
    _jspx_imports_classes.add("org.iplass.mtp.entity.Entity");
    _jspx_imports_classes.add("org.iplass.mtp.impl.web.WebResponseWrapper");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.PropertyDefinition");
    _jspx_imports_classes.add("java.io.StringWriter");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.EntityViewUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.StringPropertyEditor");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.StringPropertyEditor.StringDisplayType");
    _jspx_imports_classes.add("org.iplass.mtp.util.StringUtil");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.properties.ReferenceProperty");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.ViewConst");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinition");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.PropertyEditor");
    _jspx_imports_classes.add("org.iplass.mtp.ManagerLocator");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.ReferencePropertyEditor");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.ReferencePropertyEditor.ReferenceDisplayType");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.NestProperty");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.detail.DetailViewCommand");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinitionManager");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	ReferencePropertyEditor editor = (ReferencePropertyEditor) request.getAttribute(Constants.EDITOR_EDITOR);
	Object value = request.getAttribute(Constants.EDITOR_PROP_VALUE);
	PropertyDefinition pd = (PropertyDefinition) request.getAttribute(Constants.EDITOR_PROPERTY_DEFINITION);

	String propName = editor.getPropertyName();
	
	String contextPath = TemplateUtil.getTenantContextPath();
	String urlPath = ViewUtil.getParamMappingPath(editor.getObjectName(), editor.getViewName());
	//表示用のアクション
	String view = "";
	if (StringUtil.isNotBlank(editor.getViewrefActionName())) {
		view = contextPath + "/" + editor.getViewrefActionName() + urlPath;
	} else {
		view = contextPath + "/" + DetailViewCommand.REF_VIEW_ACTION_NAME + urlPath;
	}
	
	boolean refEdit = false;
	if (editor.isEditableReference()) {
		refEdit = true;
	}
	
	Entity rootEntity = (Entity) request.getAttribute(Constants.ROOT_ENTITY);
	String rootOid = rootEntity != null ? rootEntity.getOid() : "";
	String rootVersion = rootEntity != null && rootEntity.getVersion() != null ? rootEntity.getVersion().toString() : "";

	String rootDefName = (String) request.getAttribute(Constants.ROOT_DEF_NAME);
	String viewName = (String) request.getAttribute(Constants.VIEW_NAME);
	viewName = StringUtil.escapeHtml(viewName, true);
	
	// 検索結果である場合は viewType = SearchResult,
	// 大規模参照プロパティ検索である場合は viewType = Detail
	String viewType = (String) request.getAttribute(Constants.VIEW_TYPE);
	viewType = StringUtil.escapeHtml(viewType, true);

	Entity entity = value instanceof Entity ? (Entity) value : null;
	
	if (editor.getNestProperties().size() == 0) {
		if (entity != null) {
			if (editor.getDisplayType() == ReferenceDisplayType.HIDDEN) {
				//HIDDEN
				String key = entity.getOid() + "_" + entity.getVersion();

      out.write("<input type=\"hidden\" name=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(104,27) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(propName );
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write("\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(104,67) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(key );
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write("\"/>\n");

			} else {
				//HIDDEN以外
				if (getDisplayPropLabel(editor, entity) != null) {
					String linkId = propName + "_" + entity.getOid();
					String displayPropLabel = getDisplayPropLabel(editor, entity);
					if (editor.getDisplayType() == ReferenceDisplayType.LABEL) {
						//ラベルの場合はリンクにしない

      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(114,0) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(displayPropLabel );
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);

					} else {
						String showReference = "showReference(" 
							+ "'" + StringUtil.escapeJavaScript(view) + "'" 
							+ ", '" + StringUtil.escapeJavaScript(editor.getObjectName()) + "'"
							+ ", '" + StringUtil.escapeJavaScript(entity.getOid()) + "'"
							+ ", '" + entity.getVersion() + "'"
							+ ", '" + StringUtil.escapeJavaScript(linkId) + "'"
							+ ", " + refEdit
							+ ", null"
							+ ", '" + StringUtil.escapeJavaScript(rootDefName) + "'"
							+ ", '" + StringUtil.escapeJavaScript(viewName) + "'"
							+ ", '" + StringUtil.escapeJavaScript(propName) + "'"
							+ ", '" + StringUtil.escapeJavaScript(viewType) + "'"
							+ ", null"
							+ ", '" + StringUtil.escapeJavaScript(rootOid) + "'"
							+ ", '" + StringUtil.escapeJavaScript(rootVersion) + "'"
							+ ")";

      out.write("<a href=\"javascript:void(0)\" class=\"modal-lnk\" id=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(134,51) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue(linkId );
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      out.write("\" data-linkId=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(134,96) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue(linkId );
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      out.write("\"\n");
      out.write(" onclick=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(135,10) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue(showReference );
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      out.write('"');
      out.write('>');
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f6 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f6.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f6.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(135,48) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f6.setValue(displayPropLabel );
      int _jspx_eval_c_005fout_005f6 = _jspx_th_c_005fout_005f6.doStartTag();
      if (_jspx_th_c_005fout_005f6.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f6);
      out.write("</a>\n");

					}
				}
			}
		}
	} else if (editor.getNestProperties().size() > 0) {
		@SuppressWarnings("unchecked") Map<String, String> eval = (Map<String, String>) request.getAttribute(Constants.EDITOR_REF_ENTITY_VALUE_MAP);
		ReferenceProperty rp = (ReferenceProperty) pd;
		EntityDefinitionManager edm = ManagerLocator.getInstance().getManager(EntityDefinitionManager.class);
		EntityDefinition ed = edm.get(rp.getObjectDefinitionName());
		for (NestProperty np : editor.getNestProperties()) {
			String key = editor.getPropertyName() + "." + np.getPropertyName();
			PropertyDefinition _pd = ed.getProperty(np.getPropertyName());
			if (isDispProperty(_pd, np)) {
				PropertyEditor npEditor = np.getEditor();
				if (!npEditor.isHide() 
						&& Entity.NAME.equals(np.getPropertyName())) {
					//NestPropertyのEditorがHIDDENではなく、NAMEの場合
					
					if (entity != null && entity.getName() != null) {
						String linkId = propName + "_" + entity.getOid();
						//こっちはリンクのままに
						//コマンド側で参照先のプロパティか判断するためフラグ設定
						request.setAttribute(Constants.EDITOR_REF_NEST_PROPERTY_PREFIX + editor.getPropertyName(), true);
						if (np.getEditor() instanceof StringPropertyEditor
								&& ((StringPropertyEditor) np.getEditor()).getDisplayType() == StringDisplayType.LABEL) {

      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f7 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f7.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f7.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(163,0) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f7.setValue(entity.getName() );
      int _jspx_eval_c_005fout_005f7 = _jspx_th_c_005fout_005f7.doStartTag();
      if (_jspx_th_c_005fout_005f7.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f7);

						} else {
							String showReference = "showReference(" 
								+ "'" + StringUtil.escapeJavaScript(view) + "'" 
								+ ", '" + StringUtil.escapeJavaScript(editor.getObjectName()) + "'"
								+ ", '" + StringUtil.escapeJavaScript(entity.getOid()) + "'"
								+ ", '" + entity.getVersion() + "'"
								+ ", '" + StringUtil.escapeJavaScript(linkId) + "'"
								+ ", " + refEdit
								+ ", null"
								+ ", '" + StringUtil.escapeJavaScript(rootDefName) + "'"
								+ ", '" + StringUtil.escapeJavaScript(viewName) + "'"
								+ ", '" + StringUtil.escapeJavaScript(propName) + "'"
								+ ", '" + StringUtil.escapeJavaScript(viewType) + "'"
								+ ", null"
								+ ", '" + StringUtil.escapeJavaScript(rootOid) + "'"
								+ ", '" + StringUtil.escapeJavaScript(rootVersion) + "'"
								+ ")";

      out.write("<a href=\"javascript:void(0)\" class=\"modal-lnk\" id=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f8 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f8.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f8.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(183,51) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f8.setValue(linkId );
      int _jspx_eval_c_005fout_005f8 = _jspx_th_c_005fout_005f8.doStartTag();
      if (_jspx_th_c_005fout_005f8.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f8);
      out.write("\" data-linkId=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f9 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f9.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f9.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(183,96) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f9.setValue(linkId );
      int _jspx_eval_c_005fout_005f9 = _jspx_th_c_005fout_005f9.doStartTag();
      if (_jspx_th_c_005fout_005f9.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f9);
      out.write("\"\n");
      out.write(" onclick=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f10 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f10.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f10.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(184,10) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f10.setValue(showReference );
      int _jspx_eval_c_005fout_005f10 = _jspx_th_c_005fout_005f10.doStartTag();
      if (_jspx_th_c_005fout_005f10.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f10);
      out.write('"');
      out.write('>');
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f11 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f11.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f11.setParent(null);
      // /jsp/gem/generic/editor/reference/ReferencePropertyEditor_SearchResult.jsp(184,48) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f11.setValue(entity.getName() );
      int _jspx_eval_c_005fout_005f11 = _jspx_th_c_005fout_005f11.doStartTag();
      if (_jspx_th_c_005fout_005f11.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f11);
      out.write("</a>\n");

						}
					}
				} else {
					Object rValue = entity != null ? entity.getValue(_pd.getName()) : null;
					npEditor.setPropertyName(key);
					request.setAttribute(Constants.EDITOR_EDITOR, npEditor);
					request.setAttribute(Constants.EDITOR_PROP_VALUE, rValue);
					request.setAttribute(Constants.EDITOR_PROPERTY_DEFINITION, _pd);
					request.setAttribute(Constants.EDITOR_REF_NEST, true);//2重ネスト防止用フラグ
					request.setAttribute(Constants.EDITOR_REF_NEST_VALUE, entity);//JoinProperty用
					String path =  EntityViewUtil.getJspPath(npEditor, ViewConst.DESIGN_TYPE_GEM);
					if (path != null) {
						//プロパティ単位でhtmlを保持する仕組みの為、ネストの項目がうまく表示されない
						//ネストの項目は個別にhtmlを保持する
						//→直接htmlとして出力できないので、出力するケースが出てきた場合は対応が必要
						RequestDispatcher dispatcher = request.getRequestDispatcher(path);
						WebResponseWrapper res = new WebResponseWrapper(response, new StringWriter());
						dispatcher.include(request, res);
						String html = res.toString().replace("\r\n", "").replace("\n", "").replace("\r", "");
						Boolean isNest = (Boolean) request.getAttribute(Constants.EDITOR_REF_NEST_PROPERTY_PREFIX + npEditor.getPropertyName());
						if (isNest != null && isNest) {
							eval.put(key + ".name", html);
						} else {
							eval.put(key, html);
						}

					}
					request.removeAttribute(Constants.EDITOR_REF_NEST);
					request.removeAttribute(Constants.EDITOR_REF_NEST_VALUE);
				}
			}
		}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
