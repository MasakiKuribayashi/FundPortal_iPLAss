/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-28 08:12:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.generic.element.section;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import org.iplass.mtp.entity.Entity;
import org.iplass.mtp.ManagerLocator;
import org.iplass.mtp.util.*;
import org.iplass.mtp.view.generic.*;
import org.iplass.mtp.view.generic.element.*;
import org.iplass.mtp.view.generic.element.section.*;
import org.iplass.mtp.view.generic.element.property.PropertyItem;
import org.iplass.mtp.view.generic.ViewConst;
import org.iplass.mtp.web.template.TemplateUtil;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.ViewUtil;

public final class DefaultSection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


	boolean checkDispElement(OutputType type, Element elem) {
		boolean dispElement = true;
		if (elem instanceof PropertyItem) {
			PropertyItem prop = (PropertyItem) elem;
			dispElement = isDisp(type, prop.isHideDetail(), prop.isHideView());
		} else if (elem instanceof ScriptingElement) {
			ScriptingElement se = (ScriptingElement) elem;
			dispElement = isDisp(type, se.isHideDetail(), se.isHideView());
		} else if (elem instanceof TemplateElement) {
			TemplateElement te = (TemplateElement) elem;
			dispElement = isDisp(type, te.isHideDetail(), te.isHideView());
		} else if (elem instanceof VirtualPropertyItem) {
			VirtualPropertyItem prop = (VirtualPropertyItem) elem;
			dispElement = isDisp(type, prop.isHideDetail(), prop.isHideView());
		} else if (elem instanceof DefaultSection) {
			DefaultSection sec = (DefaultSection) elem;
			dispElement = isDisp(type, sec.isHideDetail(), sec.isHideView());
		} else if (elem instanceof ReferenceSection) {
			ReferenceSection sec = (ReferenceSection) elem;
			dispElement = isDisp(type, sec.isHideDetail(), sec.isHideView());
		} else if (elem instanceof MassReferenceSection) {
			MassReferenceSection sec = (MassReferenceSection) elem;
			dispElement = isDisp(type, sec.isHideDetail(), sec.isHideView());
		} else if (elem instanceof ScriptingSection) {
			ScriptingSection sec = (ScriptingSection) elem;
			dispElement = isDisp(type, sec.isHideDetail(), sec.isHideView());
		} else if (elem instanceof TemplateSection) {
			TemplateSection sec = (TemplateSection) elem;
			dispElement = isDisp(type, sec.isHideDetail(), sec.isHideView());
		}
		return dispElement;
	}
	boolean isDisp(OutputType type, boolean hideDetail, boolean hideView) {
		if (type == OutputType.EDIT) {
			return !hideDetail;
		} else if (type == OutputType.VIEW) {
			return !hideView;
		} else if (type == OutputType.BULK) {
			return !hideDetail;
		}
		return false;
	}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(11);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic.element.section");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("org.iplass.mtp.util");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic.element");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("org.iplass.mtp.entity.Entity");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.property.PropertyItem");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.ViewConst");
    _jspx_imports_classes.add("org.iplass.mtp.ManagerLocator");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	Element element = (Element) request.getAttribute(Constants.ELEMENT);
	Object value = request.getAttribute(Constants.ENTITY_DATA);
	Entity entity = value instanceof Entity ? (Entity)value : null;
	OutputType type = (OutputType) request.getAttribute(Constants.OUTPUT_TYPE);
	String execType = (String)request.getAttribute(Constants.EXEC_TYPE);
	boolean isInsert = Constants.EXEC_TYPE_INSERT.equals(execType);

	String defName = (String)request.getAttribute(Constants.ROOT_DEF_NAME);

	//表示判定スクリプトバインド用エンティティ
	Entity rootEntity = (Entity) request.getAttribute(Constants.ROOT_ENTITY);

	DefaultSection section = (DefaultSection) element;

	if ((type == OutputType.EDIT && section.isHideDetail())
			|| (type == OutputType.VIEW && section.isHideView())) return;

	//新規の場合、システム項目は非表示
	if (isInsert && Constants.AUTO_GENERATE_DETAIL_SYSTEM_SECTION_CSS_CLASS.equals(section.getStyle())) {
		return;
	}

	EntityViewManager evm = ManagerLocator.manager(EntityViewManager.class);

	//列数で幅調整
	if (section.getColNum() == 0) {
		section.setColNum(1);
	}
	String colNumCellStyle = "col" + section.getColNum();
	String cellStyle = "section-data " + colNumCellStyle;

	int rowNum = section.getElements().size() / section.getColNum();
	if (section.getElements().size() % section.getColNum() > 0) {
		//割り切れなければ1行追加
		rowNum++;
	}

	String id = "";
	if (StringUtil.isNotBlank(section.getId())) {
		id = "id=\"" + StringUtil.escapeHtml(section.getId()) + "\"";
	}

	String style = "";
	if (StringUtil.isNotBlank(section.getStyle())) {
		style = section.getStyle();
	}

	String disclosure = "";
	String disclosureStyle = "";
	if (!section.isExpandable()) {
		disclosure = " disclosure-close";
		disclosureStyle = "display: none;";
	}

	//詳細編集/詳細表示で表示する項目の抽出(非表示の場合ブランク扱い)
	List<Element> elementList = new ArrayList<>();
	List<Element> hiddenList = new ArrayList<>();
	for (Element subElement : section.getElements()) {
		if (checkDispElement(type, subElement)) {
			if (subElement instanceof PropertyItem) {
				PropertyItem property = (PropertyItem) subElement;
				//hiddenはレイアウトを保持するためBlankSpaceに置き換えたうえで退避
				if (property.getEditor() != null && property.getEditor().isHide()) {
					elementList.add(new BlankSpace());
					hiddenList.add(property);
				} else {
					elementList.add(property);
				}
			} else if (subElement instanceof VirtualPropertyItem) {
				VirtualPropertyItem property = (VirtualPropertyItem) subElement;
				//hiddenはレイアウトを保持するためBlankSpaceに置き換えたうえで退避
				if (property.getEditor() != null && property.getEditor().isHide()) {
					elementList.add(new BlankSpace());
					hiddenList.add(property);
				} else {
					elementList.add(property);
				}
			} else {
				elementList.add(subElement);
			}
		} else {
			BlankSpace blank = new BlankSpace();
			blank.setDispFlag(false);
			elementList.add(blank);
		}
	}

	//先頭行にインナーセクションが含まれるか
	boolean hasSectionInFirstRow = false;
	if (!elementList.isEmpty()) {
		for (int i = 0; i < section.getColNum(); i++) {
			Element subElement = elementList.get(i);
			if (subElement instanceof Section) {
				hasSectionInFirstRow = true;
			}
		}
	}

	String title = TemplateUtil.getMultilingualString(section.getTitle(), section.getLocalizedTitleList());

	//カスタムスタイル用のSectionKEYをセット
	request.setAttribute(Constants.SECTION_SCRIPT_KEY, section.getStyleScriptKey());

      out.write("<div ");
      out.print(id );
      out.write(" class=\"default-section ");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(184,37) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(style );
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write("\">\n");
      out.write("<div class=\"hgroup-03 sechead");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(185,29) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(disclosure );
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write("\">\n");
      out.write("\n");
      out.write("<h3><span>");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(187,10) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(title );
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      out.write("</span></h3>\n");
      out.write("</div>\n");
      out.write("<div style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(189,12) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue(disclosureStyle );
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      out.write('"');
      out.write('>');
      out.write('\n');

	if (StringUtil.isNotBlank(section.getUpperContents())) {
		evm.executeTemplate(defName, section.getContentScriptKey() + "_UpperContent", request, response, application, pageContext);
	}

      out.write("<table class=\"tbl-section\">\n");

	if (hasSectionInFirstRow) {
		//列幅崩れ回避のダミー行出力

      out.write("<thead>\n");
      out.write("<tr class=\"layout-row\">\n");

		for (int i = 0; i < section.getColNum(); i++) {

      out.write("<th class=\"section-data ");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(205,24) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue(colNumCellStyle );
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      out.write("\"></th>\n");
      out.write("<td class=\"section-data ");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(206,24) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue(colNumCellStyle );
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      out.write("\"></td>\n");

		}

      out.write("</tr>\n");
      out.write("</thead>\n");

	}
	int index = 0;
	for (int i = 0; i < rowNum; i++) {
		//行内のElementがすべて非表示になってないかチェック
		boolean isDispRow = false;
		int _index = index;
		for (int j = 0; j < section.getColNum(); j++) {
			if (elementList.size() > _index) {
				Element subElement = elementList.get(_index++);
				if (!(subElement instanceof BlankSpace)
						&& EntityViewUtil.isDisplayElement(defName, subElement.getElementRuntimeId(), type, rootEntity)
						&& (type != OutputType.EDIT || ViewUtil.dispElement(subElement))) {
					isDispRow = true;
					break;
				}
			}
		}
		if (!isDispRow) {
			index += section.getColNum();
			continue;
		}

      out.write("<tr>\n");

		for (int j = 0; j < section.getColNum(); j++) {
			if (elementList.size() > index) {
				Element subElement = elementList.get(index++);
				if (EntityViewUtil.isDisplayElement(defName, subElement.getElementRuntimeId(), type, rootEntity)
						&& (type != OutputType.EDIT || ViewUtil.dispElement(subElement))) {
					request.setAttribute(Constants.ELEMENT, subElement);
					request.setAttribute(Constants.COL_NUM, section.getColNum());

					String path = EntityViewUtil.getJspPath(subElement, ViewConst.DESIGN_TYPE_GEM);
					if (path != null) {
						boolean isSection = subElement instanceof Section;
						if (isSection){
							String sectionStyle = cellStyle;
							if (subElement instanceof ScriptingSection && !((ScriptingSection) subElement).isDispBorderInSection()) {
								sectionStyle = colNumCellStyle;
							} else if (subElement instanceof TemplateSection && !((TemplateSection) subElement).isDispBorderInSection()) {
								sectionStyle = colNumCellStyle;
							} else if (subElement instanceof DefaultSection && !((DefaultSection) subElement).isDispBorderInSection()) {
								sectionStyle = colNumCellStyle;
							} else if (subElement instanceof ReferenceSection && !((ReferenceSection) subElement).isDispBorderInSection()) {
								sectionStyle = colNumCellStyle;
							}

      out.write("<td class=\"inner-section ");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f6 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f6.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f6.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(260,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f6.setValue(sectionStyle );
      int _jspx_eval_c_005fout_005f6 = _jspx_th_c_005fout_005f6.doStartTag();
      if (_jspx_th_c_005fout_005f6.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f6);
      out.write("\" colspan=\"2\">\n");

						}

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, path , out, false);

						if (isSection){

      out.write("</td>\n");

						}
					}
				} else {

      out.write("<th class=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f7 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f7.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f7.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(274,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f7.setValue(cellStyle );
      int _jspx_eval_c_005fout_005f7 = _jspx_th_c_005fout_005f7.doStartTag();
      if (_jspx_th_c_005fout_005f7.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f7);
      out.write("\"></th>\n");
      out.write("<td class=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f8 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f8.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f8.setParent(null);
      // /jsp/gem/generic/element/section/DefaultSection.jsp(275,11) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f8.setValue(cellStyle );
      int _jspx_eval_c_005fout_005f8 = _jspx_th_c_005fout_005f8.doStartTag();
      if (_jspx_th_c_005fout_005f8.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f8);
      out.write("\"></td>\n");

				}
			}
		}

      out.write("</tr>\n");

	}

      out.write("</table>\n");
      out.write("<div class=\"hidden-input-area\">\n");

	//hidden出力
	for (Element hiddenElement : hiddenList) {
		if (EntityViewUtil.isDisplayElement(defName, hiddenElement.getElementRuntimeId(), type, rootEntity)
				&& (type != OutputType.EDIT || ViewUtil.dispElement(hiddenElement))) {
			request.setAttribute(Constants.ELEMENT, hiddenElement);
			request.setAttribute(Constants.COL_NUM, section.getColNum());

			String path = EntityViewUtil.getJspPath(hiddenElement, ViewConst.DESIGN_TYPE_GEM);
			if (path != null) {

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, path , out, false);

			}
		}
	}

      out.write("</div>\n");
      out.write("\n");

	if (StringUtil.isNotBlank(section.getLowerContents())) {
		evm.executeTemplate(defName, section.getContentScriptKey() + "_LowerContent", request, response, application, pageContext);
	}

      out.write("</div>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
