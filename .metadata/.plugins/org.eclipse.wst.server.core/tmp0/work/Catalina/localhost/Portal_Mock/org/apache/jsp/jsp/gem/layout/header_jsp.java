/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-28 07:43:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.layout;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.iplass.mtp.ManagerLocator;
import org.iplass.mtp.auth.*;
import org.iplass.mtp.entity.definition.EntityDefinition;
import org.iplass.mtp.entity.definition.EntityDefinitionManager;
import org.iplass.mtp.entity.fulltextsearch.FulltextSearchManager;
import org.iplass.mtp.impl.i18n.I18nUtil;
import org.iplass.mtp.impl.web.i18n.LangSelector;
import org.iplass.mtp.impl.web.WebUtil;
import org.iplass.mtp.tenant.Tenant;
import org.iplass.mtp.tenant.TenantI18nInfo;
import org.iplass.mtp.tenant.web.TenantWebInfo;
import org.iplass.mtp.tenant.gem.TenantGemInfo;
import org.iplass.mtp.util.StringUtil;
import org.iplass.mtp.view.generic.*;
import org.iplass.mtp.view.top.parts.ApplicationMaintenanceParts;
import org.iplass.mtp.view.top.parts.FulltextSearchViewParts;
import org.iplass.mtp.view.top.parts.PreviewDateParts;
import org.iplass.mtp.view.top.parts.TopViewParts;
import org.iplass.mtp.view.top.TopViewDefinition;
import org.iplass.mtp.view.top.TopViewDefinitionManager;
import org.iplass.mtp.web.actionmapping.permission.ActionPermission;
import org.iplass.mtp.web.template.TemplateUtil;
import org.iplass.gem.command.AboutCommand;
import org.iplass.gem.command.ChangeRoleCommand;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.GemResourceBundleUtil;
import org.iplass.gem.command.MenuCommand;
import org.iplass.gem.command.ViewUtil;
import org.iplass.gem.command.auth.LogoutCommand;
import org.iplass.gem.command.auth.RevokeApplicationCommand;
import org.iplass.gem.command.auth.ViewUserMaintenanceCommand;
import org.iplass.gem.command.fulltext.FullTextSearchViewCommand;
import org.iplass.gem.command.preview.PreviewDateViewCommand;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

EntityDefinitionManager edm = ManagerLocator.getInstance().getManager(EntityDefinitionManager.class);
	EntityViewManager evm = ManagerLocator.getInstance().getManager(EntityViewManager.class);
	AuthManager am = ManagerLocator.getInstance().getManager(AuthManager.class);
	TopViewDefinitionManager tvdm = ManagerLocator.getInstance().getManager(TopViewDefinitionManager.class);
	FulltextSearchManager fsm = ManagerLocator.getInstance().getManager(FulltextSearchManager.class);

	/**
	 * 全文検索で利用するViewNameに対するSearchFormViewの取得
	 */
	SearchFormView getSearchFormView(String defName, String viewName) {
		EntityView ev = evm.get(defName);
		EntityDefinition ed = edm.get(defName);
		SearchFormView view = null;
		if (ev != null) {
			if (viewName == null || viewName.isEmpty()) {
				view = ev.getDefaultSearchFormView();
				if (view == null) {
					view = FormViewUtil.createDefaultSearchFormView(ed);
				}
			} else {
				view = ev.getSearchFormView(viewName);
			}
		} else {
			view = FormViewUtil.createDefaultSearchFormView(ed);
		}
		return view;
	}

	/**
	 * 全文検索対象Entityの取得
	 */
	Map<String, String> getFulltextEntities(TopViewDefinition topView) {
		//全文検索の利用可否チェック
		if (!fsm.isUseFulltextSearch()) {
			return Collections.emptyMap();
		}

		//TopViewのParts取得
		FulltextSearchViewParts fulltextSearchViewParts = tvdm.getTopViewParts(topView, FulltextSearchViewParts.class);

		Map<String, String> entityMap = new HashMap<String, String>();
		if (fulltextSearchViewParts == null) {
			//Entity定義から指定
			for (String defName : edm.definitionList()) {
				EntityDefinition def = edm.get(defName);
				if (def != null && def.isCrawl()) {
					String displayName = TemplateUtil.getMultilingualString(def.getDisplayName(), def.getLocalizedDisplayNameList());
					entityMap.put(def.getName(), displayName);
				}
			}
		} else {
			if (!fulltextSearchViewParts.isDispSearchWindow()) {
				//検索を表示しない場合は空を返す
				return Collections.emptyMap();
			}

			//Viewの設定があるないに関わらず、全部返ってくる
			Map<String, String> partsViewMap = fulltextSearchViewParts.getViewNames();
			if (partsViewMap != null) {
				//表示対象の取得
				Map<String, Boolean> partsDispMap = fulltextSearchViewParts.getDispEntities();
				if (partsDispMap == null) {
					partsDispMap = Collections.emptyMap();
				}

				for(Map.Entry<String, String> entry : partsViewMap.entrySet()) {
					EntityDefinition ed = edm.get(entry.getKey());

					//表示対象のチェック
					if (ed.isCrawl() && partsDispMap.get(ed.getName())) {
						EntityView view = evm.get(ed.getName());
						SearchFormView form = null;

						//viewを取得する
						String viewName = entry.getValue();

						if (StringUtil.isEmpty(viewName)) {
							// デフォルトレイアウトを利用
							if (view != null && view.getSearchFormViewNames().length > 0) {
								//1件でもView定義があればその中からデフォルトレイアウトを探す
								form = view.getDefaultSearchFormView();
							} else {
								// 何もなければ自動生成
								form = FormViewUtil.createDefaultSearchFormView(ed);
							}
						} else {
							// 指定レイアウトを利用
							if (view.getSearchFormView(viewName) != null) {
								form = view.getSearchFormView(viewName);
							} else {
								// なければ自動生成
								form = FormViewUtil.createDefaultSearchFormView(ed);
							}
						}

						String displayName = TemplateUtil.getMultilingualString(form.getTitle(), form.getLocalizedTitleList(), ed.getDisplayName(), ed.getLocalizedDisplayNameList());
						entityMap.put(ed.getName(), displayName);
					}
				}
			}
		}
		return entityMap;
	}

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rs", org.iplass.mtp.web.template.ELFunctions.class, "rs", new Class[] {java.lang.String.class, java.lang.String.class});
  _jspx_fnmap_1= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:esc", org.iplass.mtp.web.template.ELFunctions.class, "esc", new Class[] {java.lang.String.class});
  _jspx_fnmap_2= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rsp", org.iplass.mtp.web.template.ELFunctions.class, "rsp", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.Object.class});
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/mtp.tld", Long.valueOf(1740642050000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("org.iplass.mtp.auth");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(48);
    _jspx_imports_classes.add("org.iplass.gem.command.auth.RevokeApplicationCommand");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.iplass.mtp.impl.web.WebUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.auth.LogoutCommand");
    _jspx_imports_classes.add("org.iplass.mtp.tenant.web.TenantWebInfo");
    _jspx_imports_classes.add("org.iplass.gem.command.auth.ViewUserMaintenanceCommand");
    _jspx_imports_classes.add("org.iplass.gem.command.GemResourceBundleUtil");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinition");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.TopViewDefinition");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.TopViewDefinitionManager");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.parts.PreviewDateParts");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.parts.ApplicationMaintenanceParts");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinitionManager");
    _jspx_imports_classes.add("org.iplass.mtp.tenant.Tenant");
    _jspx_imports_classes.add("org.iplass.mtp.tenant.TenantI18nInfo");
    _jspx_imports_classes.add("org.iplass.mtp.web.actionmapping.permission.ActionPermission");
    _jspx_imports_classes.add("org.iplass.mtp.entity.fulltextsearch.FulltextSearchManager");
    _jspx_imports_classes.add("org.iplass.gem.command.AboutCommand");
    _jspx_imports_classes.add("org.iplass.gem.command.ChangeRoleCommand");
    _jspx_imports_classes.add("org.iplass.mtp.impl.i18n.I18nUtil");
    _jspx_imports_classes.add("org.iplass.mtp.impl.web.i18n.LangSelector");
    _jspx_imports_classes.add("org.iplass.mtp.tenant.gem.TenantGemInfo");
    _jspx_imports_classes.add("org.iplass.mtp.util.StringUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.iplass.mtp.ManagerLocator");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.fulltext.FullTextSearchViewCommand");
    _jspx_imports_classes.add("org.iplass.gem.command.MenuCommand");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.parts.TopViewParts");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.parts.FulltextSearchViewParts");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("org.iplass.gem.command.preview.PreviewDateViewCommand");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	int tenantId = TemplateUtil.getClientTenantId();
	Tenant tenant = TemplateUtil.getTenant();

	String adminAction = "/admin/index";

	String lang = (String) request.getAttribute(LangSelector.LANG_ATTRIBUTE_NAME);

	AuthContext auth = AuthContext.getCurrentContext();
	User user = auth.getUser();
	String userName = "";
	if (user != null) userName = user.getName();

	boolean isAdmin = false;
	// 管理コンソールの権限チェック
	if(user != null && user.isAdmin() && auth.checkPermission(new ActionPermission(adminAction))) {
		isAdmin = true;
	}

	//ナビメニューを表示するか(通常のlayout.jspからのみ表示)
	Boolean showNavi = (Boolean) request.getAttribute("showNavi");
	if (showNavi == null) showNavi = false;

	// 言語
	Map<String, String> enabelLangeages = TemplateUtil.getEnableLanguages();

	//ロール・メニュー
	LinkedHashMap<String, String> role = (LinkedHashMap<String, String>) request.getAttribute(Constants.ROLE);

	String roleName = (String) request.getSession().getAttribute(Constants.ROLE_NAME);
	if (roleName == null) roleName = "DEFAULT";

	//TopView定義の取得
	TopViewDefinition topView = tvdm.getRequestTopView();

	//Preview日付設定
	boolean showPreviewDate = false;
	String titlePreviewDate = null;
	if (showNavi) {
		TenantWebInfo webInfo = WebUtil.getTenantWebInfo(tenant);
		if (webInfo.isUsePreview()) {
			//テナントで許可している場合は一旦許可
			showPreviewDate = true;
			PreviewDateParts previewDateParts = tvdm.getTopViewParts(topView, PreviewDateParts.class);
			if (previewDateParts != null) {
				//パーツがある場合はパーツ設定
				showPreviewDate = previewDateParts.isUsePreviewDate();

				if (showPreviewDate) { 
					titlePreviewDate = I18nUtil.stringDef(previewDateParts.getTitle(), previewDateParts.getLocalizedTitleList());
				}
			}
			//タイトルが未指定の場合はデフォルト
			if (showPreviewDate && titlePreviewDate == null) {
				titlePreviewDate = GemResourceBundleUtil.resourceString("layout.header.previewDate");
			}
		}
	}
	
	//全文検索対象の取得
	Map<String, String> fulltextEntities = null;
	if (showNavi) {
		fulltextEntities = getFulltextEntities(topView);
	}

	//アプリ管理
	boolean showAppMentenance = false;
	String titleAppMentenance = null;
	if (showNavi && auth.isAuthenticated()) {
		ApplicationMaintenanceParts applicationMaintenanceParts = tvdm.getTopViewParts(topView, ApplicationMaintenanceParts.class);
		if (applicationMaintenanceParts != null) {
			showAppMentenance = true;
			titleAppMentenance = I18nUtil.stringDef(applicationMaintenanceParts.getTitle(), applicationMaintenanceParts.getLocalizedTitleList());
			if (titleAppMentenance == null) {
				titleAppMentenance = GemResourceBundleUtil.resourceString("layout.header.appMaintenance");
			}
		}
	}

      out.write("<div id=\"header-container\">\n");
      out.write("<div id=\"header\">\n");
      out.write("<div id=\"title\" class=\"header-title\">\n");
      out.write("<h1>\n");

	String imgUrl = ViewUtil.getTenantImgUrl();
	if (request.getAttribute("imgUrl") != null) {
		// 認証前の画面でロゴやタイトルを表示するか判断した結果のロゴURL
		imgUrl = (String)request.getAttribute("imgUrl");
	}
	if (!StringUtil.isEmpty(imgUrl)) {

      out.write("<img src=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/layout/header.jsp(260,10) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(imgUrl);
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write("\" alt=\"\" class=\"tenant-image\" />\n");

	}

	String imgMiniUrl = ViewUtil.getTenantMiniImgUrl();
	if (!StringUtil.isEmpty(imgMiniUrl)) {

      out.write("<img src=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/layout/header.jsp(267,10) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(imgMiniUrl);
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write("\" alt=\"\" class=\"tenant-mini-image\" />\n");

	}

	TenantGemInfo gemInfo = ViewUtil.getTenantGemInfo(tenant);
	if (gemInfo.isUseDisplayName()) {
		String title = ViewUtil.getDispTenantName();
		if (request.getAttribute("title") != null) {
	// 認証前の画面でロゴやタイトルを表示するか判断した結果のタイトル
	title = (String)request.getAttribute("title");
		}

      out.write("<span>");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/layout/header.jsp(279,6) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(title);
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      out.write("</span>\n");

	}

      out.write("</h1>\n");
      out.write("</div>");

	if (showNavi) {
		String additionalStyle = fulltextEntities.isEmpty() ? "unuseFulltextSearch" : "useFulltextSearch" ;

      out.write("<ul id=\"user-nav\" class=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent(null);
      // /jsp/gem/layout/header.jsp(289,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue(additionalStyle);
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      out.write("\">\n");
      out.write("\n");
      out.write("<li id=\"account-01\" class=\"hed-pull\">\n");
      out.write("<p><span class=\"name\">");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent(null);
      // /jsp/gem/layout/header.jsp(292,22) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue(userName);
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      out.write("</span></p>\n");
      out.write("<ul>\n");

		if (isAdmin) {

      out.write("<li class=\"admin-console\">\n");
      out.write("<a href=\"javascript:void(0)\" onclick=\"showAdminConsole();\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.manage\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</a>\n");
      out.write("<script>\n");
      out.write("function showAdminConsole() {\n");
      out.write("	submitForm(contextPath + \"");
      out.print(adminAction);
      out.write("\", null, \"_blank\");\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</li>\n");

		}

		//日付Preview
		if (showPreviewDate) {

      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /jsp/gem/layout/header.jsp(311,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("titlePreviewDate");
      // /jsp/gem/layout/header.jsp(311,0) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(titlePreviewDate);
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      out.write("<li class=\"preview-date\">\n");
      out.write("<span class=\"txt preview-date\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:esc(titlePreviewDate)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("</span>\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	$(\"li.preview-date > span\").on(\"click\", function() {\n");
      out.write("		var $this = $(this);\n");
      out.write("		var $dialogTrigger = getDialogTrigger($this.parent(), {resizable:false});\n");
      out.write("\n");
      out.write("		$dialogTrigger.trigger(\"click\");\n");
      out.write("\n");
      out.write("		var isSubModal = $(\"body.modal-body\").length != 0;\n");
      out.write("		var target = getModalTarget(isSubModal);\n");
      out.write("		var action = contextPath + \"/");
      out.print(PreviewDateViewCommand.ACTION_NAME);
      out.write("\";\n");
      out.write("		var $form = $(\"<form />\").attr({method:\"POST\", action:action, target:target}).appendTo(\"body\");\n");
      out.write("		if (isSubModal) $(\"<input />\").attr({type:\"hidden\", name:\"modalTarget\", value:target}).appendTo($form);\n");
      out.write("		$form.submit();\n");
      out.write("		$form.remove();\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</li>\n");

		}

		TenantI18nInfo i18nInfo = tenant.getTenantConfig(TenantI18nInfo.class);
		List<String> useLangList = i18nInfo.getUseLanguageList();
		if (!useLangList.contains(user.getLanguage())) {

			if (i18nInfo.isUseMultilingual() && i18nInfo.getUseLanguageList() != null && i18nInfo.getUseLanguageList().size() > 1) {

      out.write("<li class=\"change-area lang\">\n");
      out.write("<span class=\"txt\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.selectLang\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span>\n");
      out.write("<span class=\"node-cursor\"></span>\n");
      out.write("<ul>\n");

				for (String key : enabelLangeages.keySet()) {
					String name = enabelLangeages.get(key);

					if (useLangList.contains(key)) {
						boolean selectLang = key.equals(lang);

      out.write("<li>\n");

						if (selectLang) {

      out.write("<span class=\"icon\"></span>\n");

						}

      out.write("<span class=\"txt\">");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent(null);
      // /jsp/gem/layout/header.jsp(361,18) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue(name);
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      out.write("</span>\n");
      out.write("<input type=\"hidden\" value=\"");
      out.print(key);
      out.write("\"/>\n");
      out.write("</li>\n");

					}
				}

      out.write("</ul>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	$(\"li.lang ul li\").on(\"click\", function() {\n");
      out.write("		$(\"li.lang ul li span.icon\").remove();\n");
      out.write("		var $this = $(this);\n");
      out.write("		var lang = $(\":hidden\", $this).val();\n");
      out.write("		var param = \"{\\\"language\\\":\\\"\" + lang + \"\\\"}\";\n");
      out.write("\n");
      out.write("		$.ajax({\n");
      out.write("			type: \"POST\",\n");
      out.write("			contentType: \"application/json\",\n");
      out.write("				url: contextPath + \"/api/gem/webapi/SelectLanguageCommand\",\n");
      out.write("				dataType: \"json\",\n");
      out.write("			data: param,\n");
      out.write("			success: function(commandResult){\n");
      out.write("				$(\"<span />\").addClass(\"icon\").prependTo($this);\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</li>\n");
      out.write("\n");

			}
		}

		if (role != null && role.size() > 1) {

      out.write("<li class=\"change-area menu\">\n");
      out.write("<span class=\"txt\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.menuChng\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span>\n");
      out.write("<span class=\"node-cursor\"></span>\n");
      out.write("<ul>\n");

			for (String key : role.keySet()) {
				String name = role.get(key);
				boolean selectRole = key.equals(roleName);

      out.write("<li class=\"menu\">\n");

				if (selectRole) {

      out.write("<span class=\"icon\"></span>\n");

				}

      out.write("<span class=\"txt\">");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f6 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f6.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f6.setParent(null);
      // /jsp/gem/layout/header.jsp(418,18) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f6.setValue(name);
      int _jspx_eval_c_005fout_005f6 = _jspx_th_c_005fout_005f6.doStartTag();
      if (_jspx_th_c_005fout_005f6.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f6);
      out.write("</span>\n");
      out.write("<input type=\"hidden\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f7 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f7.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f7.setParent(null);
      // /jsp/gem/layout/header.jsp(419,28) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f7.setValue(key);
      int _jspx_eval_c_005fout_005f7 = _jspx_th_c_005fout_005f7.doStartTag();
      if (_jspx_th_c_005fout_005f7.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f7);
      out.write("\"/>\n");
      out.write("</li>\n");

			}

      out.write("</ul>\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	$(\"li.menu ul li.menu:not(:has(span.icon))\").on(\"click\", function() {\n");
      out.write("		var roleName = $(\":hidden\", this).val();\n");
      out.write("		setRole(\"");
      out.print(ChangeRoleCommand.WEBAPI_NAME);
      out.write("\", roleName, function(checkResult) {\n");
      out.write("			if (checkResult) {\n");
      out.write("				clearMenuState();\n");
      out.write("				submitForm(contextPath + \"/");
      out.print(MenuCommand.ACTION_NAME);
      out.write("\", {});\n");
      out.write("			} else {\n");
      out.write("				alert(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'layout.header.failChngMenu')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</li>\n");

		}

		if (!user.isAnonymous()) {
			if(am.canUpdateCredential(user.getAccountPolicy())) {

      out.write("<li class=\"password\">\n");
      out.write("<a href=\"javascript:void(0)\" onclick=\"changePassword()\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.passChng\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</a>\n");
      out.write("<script>\n");
      out.write("function changePassword() {\n");
      out.write("	clearMenuState();\n");
      out.write("	submitForm(contextPath + \"/");
      out.print(ViewUserMaintenanceCommand.ACTION_VIEW_UPDATE_PASSWORD);
      out.write("\");\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</li>\n");

			}
		}

		//Application Maintenance
		if (showAppMentenance) {

      out.write("<li class=\"app-maintenance\">\n");
      out.write("<span class=\"txt about-iplass\">");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f8 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f8.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f8.setParent(null);
      // /jsp/gem/layout/header.jsp(464,31) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f8.setValue(titleAppMentenance);
      int _jspx_eval_c_005fout_005f8 = _jspx_th_c_005fout_005f8.doStartTag();
      if (_jspx_th_c_005fout_005f8.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f8);
      out.write("</span>\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	$(\"li.app-maintenance > span\").on(\"click\", function() {\n");
      out.write("		clearMenuState();\n");
      out.write("		submitForm(contextPath + \"/");
      out.print(RevokeApplicationCommand.VIEW_ACTION_NAME);
      out.write("\");\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</li>\n");

		}

		//About
		String appName = application.getServletContextName();
		if (StringUtil.isEmpty(appName)) {
			appName = "iPLAss";
		}

      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f1.setParent(null);
      // /jsp/gem/layout/header.jsp(483,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setVar("appName");
      // /jsp/gem/layout/header.jsp(483,0) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setValue(appName);
      int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
      if (_jspx_th_c_005fset_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      out.write("<li class=\"about-iplass\">\n");
      out.write("<span class=\"txt about-iplass\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rsp(\"mtp-gem-messages\", \"layout.header.about\", appName)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_2));
      out.write("</span>\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	$(\"li.about-iplass > span\").on(\"click\", function() {\n");
      out.write("		var $this = $(this);\n");
      out.write("		var $dialogTrigger = getDialogTrigger($this.parent());\n");
      out.write("\n");
      out.write("		$dialogTrigger.trigger(\"click\");\n");
      out.write("\n");
      out.write("		var isSubModal = $(\"body.modal-body\").length != 0;\n");
      out.write("		var target = getModalTarget(isSubModal);\n");
      out.write("		var action = contextPath + \"/");
      out.print(AboutCommand.ACTION_NAME);
      out.write("\";\n");
      out.write("		var $form = $(\"<form />\").attr({method:\"POST\", action:action, target:target}).appendTo(\"body\");\n");
      out.write("		if (isSubModal) $(\"<input />\").attr({type:\"hidden\", name:\"modalTarget\", value:target}).appendTo($form);\n");
      out.write("		$form.submit();\n");
      out.write("		$form.remove();\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</li>\n");

		if (!user.isAnonymous()) {

      out.write("<li class=\"logout\">\n");
      out.write("<a href=\"javascript:void(0)\" onclick=\"logout();return false;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.logOut\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</a>\n");
      out.write("<script>\n");
      out.write("function logout() {\n");
      out.write("	if(window.confirm(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'layout.header.logOutConfirm')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\")) {\n");
      out.write("		clearMenuState();\n");
      out.write("		document.location = contextPath + \"/");
      out.print(LogoutCommand.ACTION_LOOUT);
      out.write("\";\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</li>\n");

		}

      out.write("</ul>\n");
      out.write("</li>");

		if (!fulltextEntities.isEmpty()) {

      out.write("<li class=\"divider\"></li>\n");
      out.write("<li id=\"search\">\n");
      out.write("<div class=\"fullsearch\">\n");
      out.write("<form method=\"POST\" action=\"\">\n");
      out.write("<div class=\"selectbox\">\n");
      out.write("<a href=\"javascript:void(0)\" class=\"select\"><span>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.search\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span></a>\n");
      out.write("<div class=\"pulldown\">\n");
      out.write("<a href=\"javascript:void(0)\" onclick=\"changeFulltextSearch('')\" >");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"layout.header.search\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</a>\n");

			for (Map.Entry<String, String> dispEntity : fulltextEntities.entrySet()) {

      out.write("<a href=\"javascript:void(0)\" onclick=\"changeFulltextSearch('");
      out.print(StringUtil.escapeJavaScript(dispEntity.getKey()));
      out.write("')\" >");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f9 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f9.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f9.setParent(null);
      // /jsp/gem/layout/header.jsp(539,118) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f9.setValue(dispEntity.getValue() );
      int _jspx_eval_c_005fout_005f9 = _jspx_th_c_005fout_005f9.doStartTag();
      if (_jspx_th_c_005fout_005f9.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f9);
      out.write("</a>\n");

			}

      out.write("</div>\n");
      out.write("<input type=\"hidden\" value=\"\" />\n");
      out.write("</div>\n");
      out.write("<p class=\"search-text\">\n");
      out.write("<input type=\"hidden\" id=\"fulltextsearch_type\" value=\"\" name=\"searchDefName\" />\n");
      out.write("<input type=\"text\" class=\"text\" id=\"fulltextsearch_key\" name=\"fulltextKey\" onkeypress=\"if(event.keyCode == 13){fulltextSearch()}\" />\n");
      out.write("<input type=\"text\" style=\"display:none;\"/>\n");
      out.write("<input type=\"button\" class=\"search-submit\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'layout.header.search')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" onclick=\"fulltextSearch()\"/>\n");
      out.write("</p>\n");
      out.write("<script>\n");
      out.write("function changeFulltextSearch(defName) {\n");
      out.write("	$(\"#fulltextsearch_type\").val(defName);\n");
      out.write("}\n");
      out.write("function fulltextSearch() {\n");
      out.write("	var defName = $(\"#fulltextsearch_type\").val();\n");
      out.write("	var key = $(\"#fulltextsearch_key\").serialize();\n");
      out.write("	key = key.replace(\"fulltextKey=\", \"\");\n");
      out.write("\n");
      out.write("	if (typeof defName === \"undefined\" || defName == null) defName = \"\";\n");
      out.write("	if (typeof key === \"undefined\" || key == null) key = \"\";\n");
      out.write("	if (key != null && key != \"\") {\n");
      out.write("		clearMenuState();\n");
      out.write("		submitForm(contextPath + \"/");
      out.print(FullTextSearchViewCommand.SEARCH_VIEW_ACTION_NAME );
      out.write("\", {\"searchDefName\":defName, \"fulltextKey\":key});\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</form>\n");
      out.write("</div>\n");
      out.write("</li>\n");

		}

      out.write("</ul>");

	}

      out.write("</div>");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
