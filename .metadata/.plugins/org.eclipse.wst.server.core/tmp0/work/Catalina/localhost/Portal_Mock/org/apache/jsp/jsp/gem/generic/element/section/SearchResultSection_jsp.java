/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-28 08:12:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.generic.element.section;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.HashMap;
import java.util.List;
import org.iplass.mtp.auth.AuthContext;
import org.iplass.mtp.entity.permission.EntityPermission;
import org.iplass.mtp.entity.definition.properties.BinaryProperty;
import org.iplass.mtp.entity.definition.properties.ReferenceProperty;
import org.iplass.mtp.entity.definition.EntityDefinitionManager;
import org.iplass.mtp.entity.definition.EntityDefinition;
import org.iplass.mtp.entity.definition.PropertyDefinition;
import org.iplass.mtp.util.StringUtil;
import org.iplass.mtp.view.generic.editor.JoinPropertyEditor;
import org.iplass.mtp.view.generic.editor.NestProperty;
import org.iplass.mtp.view.generic.editor.ReferencePropertyEditor;
import org.iplass.mtp.view.generic.element.property.PropertyColumn;
import org.iplass.mtp.view.generic.element.section.SearchResultSection;
import org.iplass.mtp.view.generic.element.section.SearchResultSection.ExclusiveControlPoint;
import org.iplass.mtp.view.generic.element.Element;
import org.iplass.mtp.view.generic.element.VirtualPropertyItem;
import org.iplass.mtp.view.generic.EntityViewUtil;
import org.iplass.mtp.view.generic.OutputType;
import org.iplass.mtp.view.generic.PagingPosition;
import org.iplass.mtp.view.generic.SearchFormView;
import org.iplass.mtp.web.template.TemplateUtil.TokenOutputType;
import org.iplass.mtp.web.template.TemplateUtil;
import org.iplass.mtp.ManagerLocator;
import org.iplass.gem.command.generic.delete.DeleteAllCommand;
import org.iplass.gem.command.generic.delete.DeleteListCommand;
import org.iplass.gem.command.generic.detail.DetailViewCommand;
import org.iplass.gem.command.generic.bulk.BulkUpdateViewCommand;
import org.iplass.gem.command.generic.bulk.MultiBulkUpdateViewCommand;
import org.iplass.gem.command.generic.search.CountCommand;
import org.iplass.gem.command.generic.search.SearchFormViewData;
import org.iplass.gem.command.generic.search.SearchSelectListCommand;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.GemResourceBundleUtil;
import org.iplass.gem.command.ViewUtil;

public final class SearchResultSection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


	boolean isDispProperty(String defName, PropertyDefinition pd, PropertyColumn property) {
		if (!EntityViewUtil.isDisplayElement(defName, property.getElementRuntimeId(), OutputType.SEARCHRESULT, null)) return false;
		if (property.getEditor() == null) return false;
		return true;
	}
	String getDefaultValue(HashMap<String, Object> defaultSearchCond, String searchCond, String key) {
		if (StringUtil.isNotBlank(searchCond)) return "";
		if (!defaultSearchCond.containsKey(key)) return "";
		Object value = defaultSearchCond.get(key);
		if (value instanceof Object[] && ((Object[]) value).length > 0) {
			value = ((Object[]) value)[0];
		}
		return value.toString();
	}

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rs", org.iplass.mtp.web.template.ELFunctions.class, "rs", new Class[] {java.lang.String.class, java.lang.String.class});
  _jspx_fnmap_1= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:outputToken", org.iplass.mtp.web.template.ELFunctions.class, "outputToken", new Class[] {java.lang.Object.class, boolean.class});
  _jspx_fnmap_2= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rsp", org.iplass.mtp.web.template.ELFunctions.class, "rsp", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.Object.class});
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/mtp.tld", Long.valueOf(1740642050000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(48);
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.SearchFormView");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.bulk.MultiBulkUpdateViewCommand");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
    _jspx_imports_classes.add("org.iplass.mtp.entity.permission.EntityPermission");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil.TokenOutputType");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.OutputType");
    _jspx_imports_classes.add("org.iplass.gem.command.GemResourceBundleUtil");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinition");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.ReferencePropertyEditor");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.delete.DeleteListCommand");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.EntityDefinitionManager");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.VirtualPropertyItem");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.detail.DetailViewCommand");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.search.SearchSelectListCommand");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.property.PropertyColumn");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.PropertyDefinition");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.section.SearchResultSection");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.bulk.BulkUpdateViewCommand");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.EntityViewUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.search.CountCommand");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.properties.BinaryProperty");
    _jspx_imports_classes.add("org.iplass.mtp.auth.AuthContext");
    _jspx_imports_classes.add("org.iplass.mtp.util.StringUtil");
    _jspx_imports_classes.add("org.iplass.mtp.entity.definition.properties.ReferenceProperty");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.delete.DeleteAllCommand");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.iplass.mtp.ManagerLocator");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.JoinPropertyEditor");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.Element");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.NestProperty");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.section.SearchResultSection.ExclusiveControlPoint");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.search.SearchFormViewData");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.PagingPosition");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('﻿');

	//呼び出し元のJSPからデータ取得
	OutputType type = (OutputType) request.getAttribute(Constants.OUTPUT_TYPE);

	String searchCond = request.getParameter(Constants.SEARCH_COND);
	if (searchCond == null) searchCond = "";

	String viewName = (String) request.getAttribute(Constants.VIEW_NAME);
	if (viewName == null) viewName = "";

	HashMap<String, Object> defaultSearchCond = (HashMap<String, Object>) request.getAttribute(Constants.DEFAULT_SEARCH_COND);
	String executeSearch = getDefaultValue(defaultSearchCond, searchCond, Constants.EXECUTE_SEARCH);

	String _multiplicity = request.getParameter(Constants.SELECT_MULTI);
	int multiplicity = 1;
	if (_multiplicity != null) {
		try {
			multiplicity = Integer.parseInt(_multiplicity);
		} catch (NumberFormatException e) {
		}
	}
	
	String _permitConditionSelectAll = request.getParameter(Constants.PERMIT_CONDITION_SELECT_ALL);
	//全選択の範囲、trueの場合は他ページも含む検索条件に一致する全データ
	boolean permitConditionSelectAll = StringUtil.isNotBlank(_permitConditionSelectAll) && "true".equals(_permitConditionSelectAll);

	SearchFormViewData data = (SearchFormViewData) request.getAttribute(Constants.DATA);
	SearchFormView view = data.getView();
	SearchResultSection section = view.getResultSection();
	EntityDefinition ed = data.getEntityDefinition();
	String defName = ed.getName();

	EntityDefinitionManager edm = ManagerLocator.getInstance().getManager(EntityDefinitionManager.class);

	AuthContext auth = AuthContext.getCurrentContext();
	boolean canUpdate = auth.checkPermission(new EntityPermission(data.getEntityDefinition().getName(), EntityPermission.Action.UPDATE));
	boolean canDelete = auth.checkPermission(new EntityPermission(data.getEntityDefinition().getName(), EntityPermission.Action.DELETE));

	//ビュー名があればアクションの後につける
	String urlPath = ViewUtil.getParamMappingPath(ed.getName(), viewName);

	String pagingPosition = PagingPosition.BOTH.name();
	if (section.getPagingPosition() != null) {
		pagingPosition = section.getPagingPosition().name();
	}

	String contextPath = TemplateUtil.getTenantContextPath();

	//詳細表示アクション
	String viewAction = "";
	if (StringUtil.isNotBlank(view.getViewActionName())) {
		viewAction = view.getViewActionName() +  urlPath;
	} else {
		viewAction = DetailViewCommand.VIEW_ACTION_NAME + urlPath;
	}

	//詳細編集アクション
	String detailAction = "";
	if (StringUtil.isNotBlank(view.getEditActionName())) {
		detailAction = view.getEditActionName() +  urlPath;
	} else {
		detailAction = DetailViewCommand.DETAIL_ACTION_NAME + urlPath;
	}

	String deleteListWebapi = "";
	if (StringUtil.isNotBlank(view.getDeleteListWebapiName())) {
		deleteListWebapi = view.getDeleteListWebapiName();
	} else {
		deleteListWebapi = DeleteListCommand.WEBAPI_NAME;
	}

	String deleteAllWebapi = "";
	if (StringUtil.isNotBlank(view.getDeleteAllWebapiName())) {
		deleteAllWebapi = view.getDeleteAllWebapiName();
	} else {
		deleteAllWebapi = DeleteAllCommand.WEBAPI_NAME;
	}

	//Limit件数
	int limit = ViewUtil.getSearchLimit(section);

	//一括詳細表示アクション
	String bulkEditAction = BulkUpdateViewCommand.BULK_EDIT_ACTION_NAME + urlPath;
	if (section.isUseBulkView()) {
		bulkEditAction = MultiBulkUpdateViewCommand.BULK_EDIT_ACTION_NAME + urlPath;
	}

	Boolean showdDetermineButton = (Boolean) request.getAttribute(Constants.SHOW_DETERMINE_BUTTON);
	if (showdDetermineButton == null) showdDetermineButton = false;

	Boolean multiSelect = OutputType.SEARCHRESULT == type && !section.isHideDelete() && canDelete || OutputType.SEARCHRESULT == type && section.isShowBulkUpdate() && canUpdate || OutputType.MULTISELECT == type;
	if (multiSelect == null) multiSelect = false;

	String id = "";
	if (StringUtil.isNotBlank(section.getId())) {
		id = "id=\"" + StringUtil.escapeHtml(section.getId()) + "\"";
	}

	String secStyle = "";
	if (StringUtil.isNotBlank(section.getStyle())) {
		secStyle = section.getStyle();
	}

	String title = GemResourceBundleUtil.resourceString("generic.element.section.SearchResultSection.srchrslt");
	if (StringUtil.isNotBlank(section.getTitle())) {
		title = TemplateUtil.getMultilingualString(section.getTitle(), section.getLocalizedTitleList());
	}

      out.write("<div ");
      out.print(id );
      out.write(" class=\"result-block search-result-section ");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(185,56) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(secStyle );
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write("\" style=\"display:none;\">\n");
      out.write("<h3 class=\"hgroup-02\">\n");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(187,0) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(title );
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write("<span class=\"chagne-condition\" style=\"display:none;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.conditionChanged\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span>\n");
      out.write("<span class=\"searching\" style=\"display:none;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.searching\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span>\n");
      out.write("<span class=\"paginInputError\" style=\"display:none;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.paginInputError\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</span>\n");
      out.write("</h3>\n");
      out.write("<div class=\"result-data\" style=\"display:none;\">\n");

	if (showdDetermineButton) {
		//選択画面の確定ボタンを結果の上にも出す

      out.write("<p class=\"btn\"><input type=\"button\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.determine')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" class=\"gr-btn gr-size-01 mb10\" onclick=\"closeModal()\" /></p>\n");

	}

      out.write("<input type=\"hidden\" name=\"offset\" value=\"0\" >\n");
      out.write("<input type=\"hidden\" name=\"limit\" value=\"");
      out.print(limit);
      out.write("\">\n");
      out.write("<input type=\"hidden\" name=\"noLimit\" value=\"");
      out.print(section.isHidePaging());
      out.write("\">\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("var $pager = null;\n");
      out.write("var grid = null;\n");
      out.write("var isloaded = false;\n");
      out.write("var keepSelectAllStatus = false;\n");
      out.write("$(function() {\n");
      out.write("	$(\".box-search-01 form\").on(\"change\", function() {\n");
      out.write("		var formName = $(\":hidden[name='formName']\").val();\n");
      out.write("		if ($(this).attr(\"name\") == formName) {\n");
      out.write("			$(\".chagne-condition\").show();\n");
      out.write("		};\n");
      out.write("	});\n");
      out.write("\n");
      out.write("	var cellAttrFunc = function (rowId, val, rowObject, colModel, rdata) {\n");

	if (section.isGroupingData()) {

      out.write("\n");
      out.write("		var rowIndex = parseInt(rowId) - 1;\n");
      out.write("		var data = grid.getGridParam(\"_data\");\n");
      out.write("		var row = data[rowIndex];\n");
      out.write("		var colName = colModel.name;\n");
      out.write("\n");
      out.write("		if (rowIndex > 0) {\n");
      out.write("			var beforeRow = data[rowIndex - 1];\n");
      out.write("			//前の行と値が同じか確認\n");
      out.write("			var dif = false;\n");
      out.write("			if (row.orgOid != beforeRow.orgOid || row.orgVersion != beforeRow.orgVersion || row[colName] != beforeRow[colName]) {\n");
      out.write("				dif = true;\n");
      out.write("			}\n");
      out.write("			//同じ場合は非表示にする、タイトルを指定しないと(\"\"含む)CELL値が設定されるので指定\n");
      out.write("			if (!dif) return \" title=\\\"&nbsp;\\\" style=\\\"display:none;\\\" \";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		//この行から何行分rowspanを設定するか計算\n");
      out.write("		var count = 0;\n");
      out.write("		for (var i = rowIndex; i < data.length; i++) {\n");
      out.write("			if (i >= data.length) break;\n");
      out.write("			var nextRow = data[i];\n");
      out.write("			var dif = false;\n");
      out.write("			if (row.orgOid != nextRow.orgOid || row.orgVersion != nextRow.orgVersion || row[colName] != nextRow[colName]) {\n");
      out.write("				dif = true;\n");
      out.write("				break;\n");
      out.write("			}\n");
      out.write("			if (!dif) count++;\n");
      out.write("			else break;\n");
      out.write("		}\n");
      out.write("		if (count > 1) {\n");
      out.write("			var label = $.jgrid.stripHtml(rdata[colModel.name]).replace(/'/g, \"&apos;\");\n");
      out.write("			if (!label || typeof label === \"undefined\") {\n");
      out.write("				//タイトルを指定しないと(\"\"含む)CELL値が設定されるので指定\n");
      out.write("				label = \"&nbsp;\";\n");
      out.write("			}\n");
      out.write("			return \" title=\\\"\" + label + \"\\\" style=\\\"vertical-align: center !important;\\\" rowspan=\\\"\" + count + \"\\\"\";\n");
      out.write("		} else {\n");
      out.write("			return null;\n");
      out.write("		}\n");

	} else {

      out.write("\n");
      out.write("		//definitionの設定がfalseなら結合しない\n");
      out.write("		return null;\n");

	}

      out.write("\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var multiSelect = ");
      out.print(multiSelect);
      out.write(";\n");
      out.write("	var colModel = new Array();\n");
      out.write("	colModel.push({name:\"orgOid\", index:\"orgOid\", sortable:false, hidden:true, frozen:true, label:\"oid\", formatter:oidCellFormatter});\n");
      out.write("	colModel.push({name:\"orgVersion\", index:\"orgVersion\", sortable:false, hidden:true, frozen:true, label:\"version\"});\n");

	if (section.getExclusiveControlPoint() == ExclusiveControlPoint.WHEN_SEARCH) {

      out.write("\n");
      out.write("	colModel.push({name:\"orgTimestamp\", index:\"orgTimestamp\", sortable:false, hidden:true, frozen:true, label:\"timestamp\"});\n");

	}
	if (OutputType.SINGLESELECT == type) {
		//スタイル調整のため、classes、labelClassesに"sel_radio"を指定

      out.write("\n");
      out.write("	colModel.push({name:'selOid', index:'selOid', width:20, sortable:false, frozen:true, label:\"\", resizable:false, classes:\"sel_radio\", labelClasses:\"sel_radio\", cellattr: cellAttrFunc});\n");

	} else if (OutputType.MULTISELECT == type) {
	} else if (OutputType.SEARCHRESULT == type) {

      out.write("\n");
      out.write("	colModel.push({name:'_mtpDetailLink', index:'_mtpDetailLink', width:");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.detailLinkWidth\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write(", sortable:false, align:'center', frozen:true, label:\"\", classes:\"detail-links\", cellattr: cellAttrFunc});\n");

	}

	for (Element element : section.getElements()) {
		if (element instanceof PropertyColumn) {
			PropertyColumn property = (PropertyColumn) element;
			String propName = property.getPropertyName();
			PropertyDefinition pd = EntityViewUtil.getPropertyDefinition(propName, ed);
			String displayLabel = TemplateUtil.getMultilingualString(property.getDisplayLabel(), property.getLocalizedDisplayLabelList(), pd.getDisplayName(), pd.getLocalizedDisplayNameList());

			if (isDispProperty(defName, pd, property)) {
				if (!(pd instanceof ReferenceProperty)) {
					String sortPropName = StringUtil.escapeHtml(propName);
					String width = "";
					if (property.getWidth() > 0) {
						width = ", width:" + property.getWidth();
					}
					String align = "";
					if (property.getTextAlign() != null) {
						align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
					}
					String style = property.getStyle() != null ? property.getStyle() : "";
					String sortable = "sortable:true";
					if (!property.isSortable() || !ViewUtil.getEntityViewHelper().isSortable(pd)) {
						sortable = "sortable:false";
					}
					String hidden = ", hidden:false";
					if (property.getEditor() != null && property.getEditor().isHide()) {
						hidden = ", hidden:true";
					}

      out.write("\n");
      out.write("	colModel.push({name:\"");
      out.print(sortPropName);
      out.write("\", index:\"");
      out.print(sortPropName);
      out.write("\", classes:\"");
      out.print(style);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", ");
      out.print(sortable);
      out.print(hidden);
      out.print(width);
      out.print(align);
      out.write(", cellattr: cellAttrFunc});\n");
      out.write("\n");

				//参照プロパティでJoinPropertyEditorを利用する場合
				} else if (property.getEditor() instanceof JoinPropertyEditor) {
					String sortPropName = StringUtil.escapeHtml(propName);
					String width = "";
					if (property.getWidth() > 0) {
						width = ", width:" + property.getWidth();
					}
					String align = "";
					if (property.getTextAlign() != null) {
						align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
					}
					String style = property.getStyle() != null ? property.getStyle() : "";
					String sortable = "sortable:true";
					if (!property.isSortable() || !ViewUtil.getEntityViewHelper().isSortable(pd)) {
						sortable = "sortable:false";
					}

      out.write("\n");
      out.write("	colModel.push({name:\"");
      out.print(sortPropName);
      out.write("\", index:\"");
      out.print(sortPropName);
      out.write("\", classes:\"");
      out.print(style);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", ");
      out.print(sortable);
      out.print(width);
      out.print(align);
      out.write(", cellattr: cellAttrFunc});\n");

				} else if (property.getEditor() instanceof ReferencePropertyEditor) {
					//参照型のName以外を表示する場合
					List<NestProperty> nest = ((ReferencePropertyEditor) property.getEditor()).getNestProperties();
					if (nest.size() == 0) {
						String sortPropName = StringUtil.escapeHtml(propName);
						String width = "";
						if (property.getWidth() > 0) {
							width = ", width:" + property.getWidth();
						}
						String align = "";
						if (property.getTextAlign() != null) {
							align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
						}
						String style = property.getStyle() != null ? property.getStyle() : "";
						String sortable = "sortable:true";
						if (!property.isSortable() || !ViewUtil.getEntityViewHelper().isSortable(pd)) {
							sortable = "sortable:false";
						}
						String hidden = ", hidden:false";
						if (property.getEditor() != null && property.getEditor().isHide()) {
							hidden = ", hidden:true";
						}

      out.write("\n");
      out.write("	colModel.push({name:\"");
      out.print(sortPropName);
      out.write("\", index:\"");
      out.print(sortPropName);
      out.write("\", classes:\"");
      out.print(style);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", ");
      out.print(sortable);
      out.print(hidden);
      out.print(width);
      out.print(align);
      out.write(", cellattr: cellAttrFunc});\n");

					} else if (nest.size() > 0) {
						String style = property.getStyle() != null ? property.getStyle() : "";
						request.setAttribute(Constants.EDITOR_REF_NEST_PROP_NAME, propName);
						request.setAttribute(Constants.EDITOR_REF_NEST_PROPERTY, pd);
						request.setAttribute(Constants.EDITOR_REF_NEST_STYLE, style);
						request.setAttribute(Constants.EDITOR_REF_NEST_EDITOR, property.getEditor());

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "SearchResultSection_Nest.jsp", out, false);

						request.removeAttribute(Constants.EDITOR_REF_NEST_PROP_NAME);
						request.removeAttribute(Constants.EDITOR_REF_NEST_PROPERTY);
						request.removeAttribute(Constants.EDITOR_REF_NEST_STYLE);
						request.removeAttribute(Constants.EDITOR_REF_NEST_EDITOR);
					}
				}
			}
		} else if (element instanceof VirtualPropertyItem) {
			VirtualPropertyItem property = (VirtualPropertyItem) element;
			String propName = StringUtil.escapeHtml(property.getPropertyName());
			String displayLabel = TemplateUtil.getMultilingualString(property.getDisplayLabel(), property.getLocalizedDisplayLabelList());
			String width = "";
			if (property.getWidth() > 0) {
				width = ", width:" + property.getWidth();
			}
			String align = "";
			if (property.getTextAlign() != null) {
				align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
			}
			String hidden = ", hidden:false";
			if (property.getEditor() != null && property.getEditor().isHide()) {
				hidden = ", hidden:true";
			}
			String style = property.getStyle() != null ? property.getStyle() : "";

      out.write("\n");
      out.write("colModel.push({name:\"");
      out.print(propName);
      out.write("\", index:\"");
      out.print(propName);
      out.write("\", classes:\"");
      out.print(style);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", sortable:false ");
      out.print(hidden);
      out.print(width);
      out.print(align);
      out.write(", cellattr: cellAttrFunc});\n");

		}
	}

      out.write("\n");
      out.write("	grid = $(\"#searchResult\").jqGrid({\n");
      out.write("		datatype: \"local\",\n");
      out.write("		autoencode: false,\n");

	if (section.getDispHeight() > 0) {

      out.write("\n");
      out.write("		height: ");
      out.print(section.getDispHeight());
      out.write(',');
      out.write('\n');

	} else {

      out.write("\n");
      out.write("		height: \"auto\",\n");

	}

      out.write("\n");
      out.write("		colModel: colModel,\n");
      out.write("		headertitles: true,\n");
      out.write("		multiselect: multiSelect,\n");
      out.write("		caption: \"Manipulating Array Data\",\n");
      out.write("		viewrecords: true,\n");
      out.write("		altRows: true,\n");
      out.write("		altclass:'myAltRowClass',\n");
      out.write("		onSortCol: function(index, iCol, sortorder) {\n");
      out.write("			var sortKey = index;\n");
      out.write("			var sortType = sortorder.toUpperCase();\n");
      out.write("\n");
      out.write("			var curSortKey = $(\":hidden[name='sortKey']\").val();\n");
      out.write("			var curSortType = $(\":hidden[name='sortType']\").val();\n");
      out.write("\n");
      out.write("			");
      out.write("\n");
      out.write("			$(\"#gview_searchResult tr.ui-jqgrid-labels th .ui-jqgrid-sortable\").removeClass('asc desc');\n");
      out.write("			$(\"#gview_searchResult tr.ui-jqgrid-labels th:eq(\" + iCol + \") .ui-jqgrid-sortable\").addClass(sortType.toLowerCase());\n");
      out.write("\n");
      out.write("			");
      out.write("\n");
      out.write("			if (sortKey !== curSortKey || sortType !== curSortType) {\n");
      out.write("				sort(sortKey, sortType);\n");
      out.write("			}\n");
      out.write("			return \"stop\";\n");
      out.write("		}\n");

	if (OutputType.SINGLESELECT == type) {

      out.write("\n");
      out.write("		,onSelectRow: function(rowid, e) {\n");
      out.write("			var row = grid.getRowData(rowid);\n");
      out.write("			var value = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("			var rowIndex = parseInt(rowid) - 1;\n");
      out.write("\n");
      out.write("			clearRowHighlight(rowIndex);\n");

		if (section.isGroupingData()) {
			// 結合されたチェックボタンにチェックを入れます。

      out.write("\n");
      out.write("			for (var i = rowIndex; i >= 0; i--) {\n");
      out.write("				if ($(\"#gview_searchResult tr.jqgrow:eq(\" + i + \")\").find(\":radio[name='selOid'][value='\" + es(value) + \"']\").is(\":visible\")) {\n");
      out.write("					rowIndex = i;\n");
      out.write("					break;\n");
      out.write("				}\n");
      out.write("			}\n");

		}

      out.write("\n");
      out.write("			var $selRow = $(\"#gview_searchResult tr.jqgrow:eq(\" + rowIndex + \")\");\n");
      out.write("			$selRow.find(\":radio[name='selOid'][value='\" + es(value) + \"']\").prop(\"checked\", true);\n");

		if (section.isGroupingData()) {

      out.write("\n");
      out.write("			var rowspan = $selRow.children(\"td.sel_radio\").attr(\"rowspan\");\n");
      out.write("			if (rowspan && e) {\n");
      out.write("				for (var i = rowIndex; i < rowIndex + parseInt(rowspan); i++) {\n");
      out.write("					setRowHighlight(i);\n");
      out.write("				}\n");
      out.write("			}\n");

		} else {

      out.write("\n");
      out.write("			setRowHighlight(rowIndex);\n");

		}

      out.write("\n");
      out.write("			selectArray.splice(0, selectArray.length, value);\n");
      out.write("		}\n");

	} else if (OutputType.MULTISELECT == type) {

      out.write("\n");
      out.write("		,onSelectRow: function(rowid, e) {\n");
      out.write("			if (!loading) {\n");
      out.write("				var row = grid.getRowData(rowid);\n");
      out.write("				var id = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("				if (e) {\n");
      out.write("					");
      out.write("\n");
      out.write("					if (selectArray.indexOf(id) == -1 && (multiplicity == -1 || selectArray.length < multiplicity)) {\n");
      out.write("						selectArray.push(id);\n");
      out.write("						");
      out.write("\n");
      out.write("						grid.resetSelection();\n");
      out.write("						applyGridSelection(false);\n");
      out.write("					} else {\n");
      out.write("						alert(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.notSelect')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");
      out.write("						grid.setSelection(rowid);\n");
      out.write("					}\n");
      out.write("				} else {\n");
      out.write("					for (var i = 0; i < selectArray.length; i++) {\n");
      out.write("						if (selectArray[i] == id) {\n");
      out.write("							selectArray.splice(i, 1);\n");
      out.write("							break;\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					");
      out.write("\n");
      out.write("					grid.resetSelection();\n");
      out.write("					applyGridSelection(false);\n");
      out.write("				}\n");
      out.write("				keepSelectAllStatus = false;\n");
      out.write("			}\n");
      out.write("		}\n");

	} else if (OutputType.SEARCHRESULT == type) {

      out.write("\n");
      out.write("		,onSelectRow: function(rowid, e) {\n");
      out.write("			var row = grid.getRowData(rowid);\n");
      out.write("			var id = row.orgOid + \"_\" + row.orgVersion;\n");

		if (!multiSelect) {

      out.write("\n");
      out.write("			var rowIndex = parseInt(rowid) - 1;\n");
      out.write("			clearRowHighlight(rowIndex);\n");
      out.write("			if (e) {\n");
      out.write("				$(\"#searchResult tr[id]\").each(function() {\n");
      out.write("					var _rowid = $(this).attr(\"id\");\n");
      out.write("					if (_rowid == rowid) return;\n");
      out.write("					var _row = grid.getRowData(_rowid);\n");
      out.write("					var _id = _row.orgOid + \"_\" + _row.orgVersion;\n");
      out.write("					if (id == _id) $(this).addClass(\"ui-state-highlight\");\n");
      out.write("				});\n");
      out.write("			}\n");

		} else {
			// 多重度が複数のデータの場合、行番号が違う同じOIDとVersionのレコードがあるので、チェックを付け直します。

      out.write("\n");
      out.write("			$(\"#searchResult tr[id]\").each(function() {\n");
      out.write("				var _rowid = $(this).attr(\"id\");\n");
      out.write("				if (_rowid == rowid) return;\n");
      out.write("				var _row = grid.getRowData(_rowid);\n");
      out.write("				var _id = _row.orgOid + \"_\" + _row.orgVersion;\n");
      out.write("				if (id == _id) grid.setSelection(_rowid, false);\n");
      out.write("			});\n");

		}

      out.write("\n");
      out.write("		}\n");

	}

	if (section.isGroupingData()) {

      out.write("\n");
      out.write("		,gridComplete: function() {\n");
      out.write("			var data = $(\"#searchResult\").getGridParam(\"_data\");\n");
      out.write("			if (!data) return;\n");
      out.write("			//チェックボタン一覧の結合処理を行います。\n");
      out.write("			$(\"#gview_searchResult tr.jqgrow\").each(function(index){\n");
      out.write("				var row = data[index];\n");
      out.write("				if (index > 0) {\n");
      out.write("					var beforeRow = data[index - 1];\n");
      out.write("					//前の行と値が同じか確認\n");
      out.write("					var dif = false;\n");
      out.write("					if (row.orgOid != beforeRow.orgOid || row.orgVersion != beforeRow.orgVersion) {\n");
      out.write("						dif = true;\n");
      out.write("					}\n");
      out.write("					if (!dif) {\n");
      out.write("						$(this).children(\".td_cbox\").hide(); return;\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("\n");
      out.write("				//この行から何行分rowspanを設定するか計算\n");
      out.write("				var count = 0;\n");
      out.write("				for (var i = index; i < data.length; i++) {\n");
      out.write("					var nextRow = data[i];\n");
      out.write("					var dif = false;\n");
      out.write("					if (row.orgOid != nextRow.orgOid || row.orgVersion != nextRow.orgVersion) {\n");
      out.write("						dif = true;\n");
      out.write("						break;\n");
      out.write("					}\n");
      out.write("					if (!dif) count++;\n");
      out.write("					else break;\n");
      out.write("				}\n");
      out.write("				if (count > 1) $(this).children(\".td_cbox\").attr(\"rowspan\", count);\n");
      out.write("			})\n");
      out.write("		}\n");

	}

      out.write("\n");
      out.write("	});\n");
      out.write("\n");

	if (!section.isHidePaging()) {
		boolean showItemCount = !section.isHideCount();
		boolean showPageLink = showItemCount ? !section.isHidePageLink() : false;
		boolean showPageJump = showItemCount ? !section.isHidePageJump() : false;

      out.write("\n");
      out.write("	var limit = ");
      out.print(limit);
      out.write(";\n");
      out.write("\n");
      out.write("	$pager = $(\".result-block .result-nav\").pager({\n");
      out.write("		limit: limit,\n");
      out.write("		showPageLink: ");
      out.print(showPageLink);
      out.write(",\n");
      out.write("		showPageJump: ");
      out.print(showPageJump);
      out.write(",\n");
      out.write("		showItemCount: ");
      out.print(showItemCount);
      out.write(",\n");
      out.write("		previewFunc: function(){\n");
      out.write("			if (keepSelectAllStatus) {\n");
      out.write("				$(\".result-block\").on(\"iplassAfterSearch\", loadingOff);\n");
      out.write("			} else {\n");
      out.write("				$(\"#cb_searchResult\").prop(\"checked\", false);\n");
      out.write("			}\n");
      out.write("			var val = ($(\":hidden[name='offset']\").val() - 0) - limit;\n");
      out.write("			doSearch($(\":hidden[name='searchType']\").val(), val, false, $(\".preview\"), \"pager\");\n");
      out.write("		},\n");
      out.write("		nextFunc: function() {\n");
      out.write("			if (keepSelectAllStatus) {\n");
      out.write("				$(\".result-block\").on(\"iplassAfterSearch\", loadingOff);\n");
      out.write("			} else {\n");
      out.write("				$(\"#cb_searchResult\").prop(\"checked\", false);\n");
      out.write("			}\n");
      out.write("			var val = ($(\":hidden[name='offset']\").val() - 0) + limit;\n");
      out.write("			doSearch($(\":hidden[name='searchType']\").val(), val, false, $(\".next\"), \"pager\");\n");
      out.write("		},\n");
      out.write("		searchFunc: function(currentPage) {\n");
      out.write("			if (keepSelectAllStatus) {\n");
      out.write("				$(\".result-block\").on(\"iplassAfterSearch\", loadingOff);\n");
      out.write("			} else {\n");
      out.write("				$(\"#cb_searchResult\").prop(\"checked\", false);\n");
      out.write("			}\n");
      out.write("			var val = currentPage * limit;\n");
      out.write("			doSearch($(\":hidden[name='searchType']\").val(), val, false, $(\".ui-icon-search\"), \"pager\");\n");
      out.write("		},\n");
      out.write("		pagingInputErrorFunc: function() {\n");
      out.write("			$pager.lock();\n");
      out.write("			$(\".paginInputError\").show().fadeOut(1500, function() {\n");
      out.write("				$pager.unlock();\n");
      out.write("			});\n");
      out.write("		}\n");
      out.write("	});\n");

	}

      out.write("\n");
      out.write("\n");
      out.write("	var searchCond = $(\":hidden[name='searchCond']\").val();\n");
      out.write("	var executeSearch = $(\":hidden[name='executeSearch']\").val();\n");
      out.write("	var params = parseSearchCond(searchCond);\n");
      out.write("	if (searchCond.length > 0 && params.length > 0) {\n");
      out.write("		for (var i = 0; i < params.length; i++) {\n");
      out.write("			var param = params[i];\n");
      out.write("			if (param.key == \"searchType\") setSearchTab(param.val);\n");
      out.write("			$(\"[name='\" + es(param.key) +\"']:not([data-norewrite])\").each(function() {\n");
      out.write("				if ($(this).is(\"input[type='radio']\")) {\n");
      out.write("					$(this).val([param.val]);\n");
      out.write("				} else if ($(this).is(\"input[type='checkbox']\")) {\n");
      out.write("				} else {\n");
      out.write("					$(this).val(param.val);\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("		}\n");
      out.write("		doSearch($(\":hidden[name='searchType']\").val(), $(\":hidden[name='offset']\").val(), false, \"init\");\n");
      out.write("	} else if (executeSearch == \"t\") {\n");
      out.write("		doSearch($(\":hidden[name='searchType']\").val(), $(\":hidden[name='offset']\").val(), false, \"init\");\n");
      out.write("	}\n");
      out.write("});\n");
      out.write("function setData(list, count) {\n");
      out.write("	$(\"div.result-data\").show();\n");
      out.write("	grid.clearGridData(true);\n");
      out.write("	grid.setGridParam({\"_data\": list}).trigger(\"reloadGrid\");\n");
      out.write("\n");
	if (type == OutputType.SINGLESELECT) { 
      out.write("\n");
      out.write("	var $selOid = $(\"<p/>\");\n");
      out.write("	var $selSingle = $(\"<span/>\").addClass(\"singleRowSelect\").appendTo($selOid);\n");
      out.write("	var $selRadio = $(\"<input/>\").attr({\"type\":\"radio\", \"name\":\"selOid\"}).appendTo($selSingle);\n");

	} else if (type == OutputType.SEARCHRESULT) {

      out.write("\n");
      out.write("	var $viewLink = $(\"<a/>\").attr({\"href\":\"javascript:void(0)\", \"action\":\"");
      out.print(StringUtil.escapeJavaScript(viewAction));
      out.write("\", \"title\":\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.detail')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\"})\n");
      out.write("			.addClass(\"detailLink\").text(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.detail')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");

		if (!section.isHideDetailLink() && (canUpdate || canDelete)) {
			//編集表示

      out.write("\n");
      out.write("	$viewLink.addClass(\"jqborder\"); //真ん中の棒線\n");
      out.write("	var $editLink = $(\"<a/>\").attr({\"href\":\"javascript:void(0)\", \"action\":\"");
      out.print(StringUtil.escapeJavaScript(detailAction));
      out.write("\", \"title\":\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.edit')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\"})\n");
      out.write("			.addClass(\"detailLink editLink\").text(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.edit')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");

		} else {
			//編集非表示

      out.write("\n");
      out.write("	var $detailLink = $(\"<p/>\");\n");
      out.write("	$viewLink.appendTo($detailLink);\n");

		}
	}

      out.write("\n");
      out.write("\n");
      out.write("	$(list).each(function(index) {\n");
      out.write("		this[\"searchResultDataId\"] = this.orgOid + \"_\" + this.orgVersion;\n");
	if (type == OutputType.SINGLESELECT) { 
      out.write("\n");
      out.write("		$selRadio.attr(\"value\", this.searchResultDataId);\n");
      out.write("		this[\"selOid\"] = $selOid.html();\n");

	} else if (type == OutputType.SEARCHRESULT) {

      out.write("\n");
      out.write("		$viewLink.attr({\"oid\":this.orgOid, \"version\":this.orgVersion});\n");

		if (!section.isHideDetailLink() && (canUpdate || canDelete)) {

      out.write("\n");
      out.write("		$editLink.attr({\"oid\":this.orgOid, \"version\":this.orgVersion});\n");
      out.write("\n");
      out.write("		var $detailLink = $(\"<p/>\");\n");
      out.write("		if (this[\"@canEdit\"] === \"false\" && this[\"@canDelete\"] === \"false\") {\n");
      out.write("			$viewLink.removeClass(\"jqborder\");\n");
      out.write("			$viewLink.appendTo($detailLink);\n");
      out.write("		} else {\n");
      out.write("			$viewLink.addClass(\"jqborder\"); //真ん中の棒線\n");
      out.write("			$viewLink.appendTo($detailLink);\n");
      out.write("			$editLink.appendTo($detailLink);\n");
      out.write("		}\n");
		} 
      out.write("\n");
      out.write("		this[\"_mtpDetailLink\"] = $detailLink.html();\n");

	}

      out.write("\n");
      out.write("		grid.addRowData(index + 1, this);\n");
      out.write("	});\n");
      out.write("\n");
      out.write("	if ($(\"audio, video\").length > 0) {\n");
      out.write("		$('audio, video').mediaelementplayer({\n");
      out.write("			success: function(player, node) {\n");
      out.write("				player.addEventListener(\"loadeddata\", function() {\n");
      out.write("					$('.fixHeight').fixHeight();\n");
      out.write("				});\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("\n");

	if (OutputType.SINGLESELECT == type) {

      out.write("\n");
      out.write("	if (selectArray.length > 0) {\n");
      out.write("		var $radio = $(\":radio[name='selOid'][value='\" + es(selectArray[0]) + \"']:visible\").prop(\"checked\", true).trigger(\"change\");\n");
      out.write("		if ($radio.length > 0) {\n");
      out.write("			var rowIndex = $(\"#gview_searchResult tr.jqgrow\").index($radio.parents(\"tr.jqgrow\"));\n");
      out.write("			setRowHighlight(rowIndex);\n");

		if (section.isGroupingData()) {

      out.write("\n");
      out.write("			var rowspan = $radio.parents(\"td.sel_radio\").attr(\"rowspan\");\n");
      out.write("			if (rowspan) {\n");
      out.write("				for (var i = rowIndex; i < rowIndex + parseInt(rowspan); i++) {\n");
      out.write("					setRowHighlight(i);\n");
      out.write("				}\n");
      out.write("			}\n");

		}

      out.write("\n");
      out.write("		}\n");
      out.write("	}\n");

	} else if (OutputType.MULTISELECT == type) {

      out.write("\n");
      out.write("	loading = true;\n");

		if (permitConditionSelectAll) {
		// 全ページor現在ページ選択

      out.write("\n");
      out.write("	$(\"#cb_searchResult\").off(\"iplassCheckboxPropChange\").off(\"click\").on(\"click\", function() {\n");
      out.write("		if ($(this).is(\":checked\")) {\n");
      out.write("			$(\"#selectSelectAllTypeDialog\").dialog(\"open\");\n");
      out.write("		} else {\n");
      out.write("			$(\"#selectDeselectAllTypeDialog\").dialog(\"open\");\n");
      out.write("		}\n");
      out.write("	});\n");

		} else {
		//現在ページのみ

      out.write("\n");
      out.write("	$(\"#cb_searchResult\").off(\"iplassCheckboxPropChange\").off(\"click\").on(\"click\", function() {\n");
      out.write("		if ($(this).is(\":checked\")) {\n");
      out.write("			selectCurrentPage();\n");
      out.write("			$(this).prop(\"checked\", true);\n");
      out.write("		} else {\n");
      out.write("			deselectCurrentPage();\n");
      out.write("			$(this).prop(\"checked\", false);\n");
      out.write("		}\n");
      out.write("	});\n");

		}

      out.write("\n");
      out.write("	if (selectArray.length > 0) {\n");
      out.write("		applyGridSelection();\n");
      out.write("	}\n");
      out.write("	loading = false;\n");

	}

      out.write("\n");
      out.write("	if ($pager) {\n");
      out.write("		var limit = $(\":hidden[name='limit']\").val() - 0;\n");
      out.write("		var offset = $(\":hidden[name='offset']\").val() - 0;\n");
      out.write("		$pager.setPage(offset, list.length, count);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	$(\"#searchResult .detailLink\").click(function(e) {\n");
      out.write("		var action = $(this).attr(\"action\");\n");
      out.write("		var oid = $(this).attr(\"oid\");\n");
      out.write("		var version = $(this).attr(\"version\");\n");
      out.write("		var isEdit = $(this).is(\".editLink\");\n");
      out.write("		if (e.ctrlKey) {\n");
      out.write("			showDetail(action, oid, version, isEdit, \"_blank\", {});\n");
      out.write("		} else {\n");
      out.write("			showDetail(action, oid, version, isEdit, null, {});\n");
      out.write("		}\n");
      out.write("		return false;\n");
      out.write("	});\n");
      out.write("	var isSubModal = $(\"body.modal-body\").length != 0;\n");
      out.write("	if (isSubModal) {\n");
      out.write("		var a = $(\"#searchResult .modal-lnk\");\n");
      out.write("		a.subModalWindow();\n");
      out.write("	} else {\n");
      out.write("		var a = $(\"#searchResult .modal-lnk\");\n");
      out.write("		a.modalWindow();\n");
      out.write("	}\n");
	if (OutputType.SEARCHRESULT == type && !section.isHideDelete() && canDelete) { 
      out.write("\n");
      out.write("	clearAllDelete();\n");
	} 
      out.write("\n");
      out.write("\n");
      out.write("	var sortKey = $(\":hidden[name='sortKey']\").val();\n");
      out.write("	var sortType = $(\":hidden[name='sortType']\").val();\n");
      out.write("	if (sortKey.length > 0 && sortType.length > 0) {\n");
      out.write("		var $grid = $(\"#searchResult\");\n");
      out.write("		var colModel = $grid.getGridParam(\"colModel\");\n");
      out.write("		if (colModel.length > 0) {\n");
      out.write("			var i;\n");
      out.write("			for (i = 0; i < colModel.length; i++){\n");
      out.write("				if (colModel[i].name == sortKey) {\n");
      out.write("					");
      out.write("\n");
      out.write("					$grid.sortGrid(colModel[i].index, false, sortType.toLowerCase());\n");
      out.write("					break;\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	$(\".fixHeight\").fixHeight();\n");
      out.write("}\n");
      out.write("function applyGridSelection(onselectrow) {\n");
      out.write("	$(\"#searchResult tr[id]\").each(function() {\n");
      out.write("		var rowid = $(this).attr(\"id\");\n");
      out.write("		var row = grid.getRowData(rowid);\n");
      out.write("		var id = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("		for (var i = 0; i < selectArray.length; i++) {\n");
      out.write("			if (id == selectArray[i]) {\n");
      out.write("				if (typeof onselectrow === \"boolean\") {\n");
      out.write("					grid.setSelection(rowid, onselectrow);\n");
      out.write("				} else {\n");
      out.write("					grid.setSelection(rowid);\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("function selectCurrentPage() {\n");
      out.write("	$(\"#searchResult tr[id]\").each(function() {\n");
      out.write("		var rowid = $(this).attr(\"id\");\n");
      out.write("		var row = grid.getRowData(rowid);\n");
      out.write("		var id = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("		if (selectArray.indexOf(id) == -1 && (multiplicity == -1 || selectArray.length < multiplicity)) {\n");
      out.write("			grid.setSelection(rowid);\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("function deselectCurrentPage() {\n");
      out.write("	$(\"#searchResult tr[id]\").each(function() {\n");
      out.write("		var rowid = $(this).attr(\"id\");\n");
      out.write("		var row = grid.getRowData(rowid);\n");
      out.write("		var id = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("		if (selectArray.indexOf(id) != -1) {\n");
      out.write("			grid.setSelection(rowid);\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("var clearRowHighlight = function(rowIndex) {\n");
      out.write("	var $rows = $(\"#searchResult tr.jqgrow\");\n");
      out.write("	if (rowIndex >= $rows.length) return;\n");
      out.write("	//選択された行以外にハイライトをクリアします。\n");
      out.write("	$rows.each(function(index) {\n");
      out.write("		if (index != rowIndex) $(this).removeClass(\"ui-state-highlight\");\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("var setRowHighlight = function (rowIndex) {\n");
      out.write("	var $rows = $(\"#searchResult tr.jqgrow\");\n");
      out.write("	if (rowIndex >= $rows.length) return;\n");
      out.write("	$rows.eq(rowIndex).addClass(\"ui-state-highlight\");\n");
      out.write("}\n");
      out.write("var loadingOff = null;\n");
      out.write("loadingOff = function(event, src) {\n");
      out.write("	if (src === \"pager\") {\n");
      out.write("		$(\"#cb_searchResult\").prop(\"checked\", true);\n");
      out.write("		$(\".result-block\").off(\"iplassAfterSearch\", loadingOff);\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<form action=\"deleteForm\" method=\"POST\">\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:outputToken('FORM_XHTML', false)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));

	if (!PagingPosition.BOTTOM.name().equals(pagingPosition)) {

      out.write("<div class=\"result-nav\"></div><!--result-nav-->\n");

	}

      out.write("<table id=\"searchResult\"></table>\n");
      out.write("\n");

	if (!PagingPosition.TOP.name().equals(pagingPosition)) {

      out.write("<div class=\"result-nav mb15\"></div><!--result-nav-->\n");

	}

      out.write("<p>\n");

	if (OutputType.SEARCHRESULT == type && !section.isHideDelete() && canDelete) {

      out.write("<input type=\"button\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.delete')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" class=\"gr-btn\" onclick=\"doDelete()\" />\n");

	}
	if (OutputType.SEARCHRESULT == type && section.isShowBulkUpdate() && canUpdate) {
		String bulkUpdateDisplayLabel = GemResourceBundleUtil.resourceString("generic.element.section.SearchResultSection.bulkUpdate");
		String localizedBulkUpdateDisplayLabel = TemplateUtil.getMultilingualString(section.getBulkUpdateDisplayLabel(), section.getLocalizedBulkUpdateDisplayLabel());
		if (StringUtil.isNotBlank(localizedBulkUpdateDisplayLabel)) {
			bulkUpdateDisplayLabel = localizedBulkUpdateDisplayLabel;
		}

      out.write("<input id=\"bulkUpdateBtn\" type=\"button\" value=\"");
      out.print(bulkUpdateDisplayLabel);
      out.write("\" class=\"gr-btn\" onclick=\"doBulkUpdate(this)\" />\n");
	} 
      out.write("</p>\n");

	if (OutputType.SEARCHRESULT == type && !section.isHideDelete() && canDelete) {

      out.write("<div id=\"selectDeleteTypeDialog\" class=\"mtp-jq-dialog\" title=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.selectDeleteType')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" style=\"display:none;\">\n");
      out.write("<ul style=\"text-align:left; margin-left:15px;\">\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"deleteType\" value=\"select\" checked>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.deleteRow\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</label>\n");
      out.write("</li>\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"deleteType\" value=\"all\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.deleteAll\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("<span id=\"deleteCount\"></span></label>\n");
      out.write("</li>\n");
      out.write("<li class=\"chagne-condition\" style=\"display:none;\">\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.displayUnmatch\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</li>\n");
      out.write("</ul>\n");
      out.write("</div>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("$(function() {\n");
      out.write("	$(\"#selectDeleteTypeDialog\").dialog({\n");
      out.write("		resizable: false,\n");
      out.write("		autoOpen: false,\n");
      out.write("		height: 180,\n");
      out.write("		width: 400,\n");
      out.write("		modal: true,\n");
      out.write("		buttons: {\n");
      out.write("			\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.delete')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\": function() {\n");
      out.write("				var delType = $(\":radio[name='deleteType']:checked\").val();\n");
      out.write("				if (delType == \"all\") {\n");
      out.write("					deleteByCondition();\n");
      out.write("				} else {\n");
      out.write("					deleteRow(true);\n");
      out.write("				}\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("			},\n");
      out.write("			\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.cancel')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\": function() {\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("			}\n");
      out.write("		},\n");
      out.write("		close: function() {\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	$(\"#selectDeleteTypeDialog\").on(\"dialogopen\", function(e) {\n");
      out.write("		adjustDialogLayer($(\".ui-widget-overlay\"));\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("function doDelete() {\n");
      out.write("	if ($(\"#cb_searchResult\").is(\":checked\")) {\n");
      out.write("		var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("		if (!validation(type)) return;\n");
      out.write("\n");
      out.write("		count(\"");
      out.print(CountCommand.WEBAPI_NAME);
      out.write("\", type, type + \"Form\", function(count) {\n");
      out.write("			var deleteItem = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.deleteItem')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\";\n");
      out.write("			deleteItem = deleteItem.replace(\"{0}\", count);\n");
      out.write("			$(\"#deleteCount\").text(deleteItem);\n");
      out.write("			$(\"#selectDeleteTypeDialog\").dialog(\"open\");\n");
      out.write("		});\n");
      out.write("	} else {\n");
      out.write("		deleteRow(false);\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("function deleteByCondition() {\n");
      out.write("	$.blockUI({message: $(\"#blockLayer\"), css: {width: \"20px\", left: \"50%\", top: \"50%\"}});\n");
      out.write("	var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("	var allVersion = $(\"[name*='allVersion']:checked\", $(\"[name='\" + type + \"Form']\")).val();\n");
      out.write("	var t = $(\":hidden[name='_t']\").val();\n");
      out.write("	deleteAll(\"");
      out.print(StringUtil.escapeJavaScript(deleteAllWebapi));
      out.write("\", type, type + \"Form\", allVersion, t, function(message) {\n");
      out.write("		if (message && message.length > 0) {\n");
      out.write("			alert(message);\n");
      out.write("		} else {\n");
      out.write("			doSearch($(\":hidden[name='searchType']\").val(), 0, false, \"delete\");\n");
      out.write("		}\n");
      out.write("		$.unblockUI();\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("function deleteRow(isConfirmed) {\n");
      out.write("	var ids = grid.getGridParam(\"selarrrow\");\n");
      out.write("	if(ids.length <= 0) {\n");
      out.write("		alert(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.selectMsg')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("	if (!isConfirmed && !confirm(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.deleteMsg')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\")) {\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var oid = [];\n");
      out.write("	for(var i=0; i<ids.length; ++i) {\n");
      out.write("		var id = ids[i];\n");
      out.write("		var row = grid.getRowData(id);\n");
      out.write("		//rowid_oid_version\n");
      out.write("		oid.push(id + \"_\" + row.orgOid + \"_\" + row.orgVersion);\n");
      out.write("	}\n");
      out.write("	var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("	var allVersion = $(\"[name*='allVersion']:checked\", $(\"[name='\" + type + \"Form']\")).val();\n");
      out.write("	var t = $(\":hidden[name='_t']\").val();\n");
      out.write("	deleteList(\"");
      out.print(StringUtil.escapeJavaScript(deleteListWebapi));
      out.write("\", oid, \"");
      out.print(StringUtil.escapeJavaScript(viewName));
      out.write("\", allVersion, t, function(message) {\n");
      out.write("		if (message && message.length > 0) {\n");
      out.write("			alert(message);\n");
      out.write("		} else {\n");
      out.write("			doSearch($(\":hidden[name='searchType']\").val(), $(\":hidden[name='offset']\").val(), false, \"delete\");\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("</script>\n");

	}
	if (OutputType.SEARCHRESULT == type && section.isShowBulkUpdate() && canUpdate) {

      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	document.scriptContext[\"countBulkUpdate\"] = function($frame, func) {\n");
      out.write("		var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("		if (!validation(type)) return;\n");
      out.write("\n");
      out.write("		count(\"");
      out.print(CountCommand.WEBAPI_NAME);
      out.write("\", type, type + \"Form\", function(count) {\n");
      out.write("			if(func && $.isFunction(func)){\n");
      out.write("				func.call($frame, count);\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	document.scriptContext[\"bulkUpdateModalWindowCallback\"] = function(id) {\n");
      out.write("		if (typeof id === \"undefined\") return;\n");
      out.write("		// 一括更新後行選択処理を実行する　\n");
      out.write("		var selectAfterBulkUpdate = function() {\n");
      out.write("			// 検索条件を元に一括更新の場合\n");
      out.write("			if (id === \"all\") {\n");
      out.write("				$(\"#cb_searchResult\").trigger(\"click\");\n");
      out.write("			// 選択された行を一括更新\n");
      out.write("			} else if ($.isArray(id)) {\n");
      out.write("				selectArray = id;\n");
      out.write("				applyGridSelection(false);\n");
      out.write("			}\n");
      out.write("			$(\".result-block\").off(\"iplassAfterSearch\", selectAfterBulkUpdate);\n");
      out.write("		}\n");
      out.write("		$(\".result-block\").on(\"iplassAfterSearch\", selectAfterBulkUpdate);\n");
      out.write("		doSearch($(\":hidden[name='searchType']\").val(), $(\":hidden[name='offset']\").val(), false, \"bulkUpdate\");\n");
      out.write("	}\n");
      out.write("});\n");
      out.write("function doBulkUpdate(target) {\n");
      out.write("	var searchCondChanged = $(\".chagne-condition\").css(\"display\") != \"none\";\n");
      out.write("	if(searchCondChanged && !confirm('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.displayUnmatchBulk\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("')) {\n");
      out.write("		return false;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("	if (!validation(type)) return;\n");
      out.write("\n");
      out.write("	var ids = grid.getGridParam(\"selarrrow\");\n");
      out.write("	if(ids.length <= 0) {\n");
      out.write("		alert(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.selectBulkUpdateMsg')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\");\n");
      out.write("		return false;\n");
      out.write("	} else {\n");
      out.write("		");
      out.write("\n");
      out.write("		ids.sort((a, b) => parseInt(a) - parseInt(b));\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var dialogOption = {resizable: true};\n");

		if (!section.isUseBulkView()) {

      out.write("\n");
      out.write("		dialogOption.dialogHeight = 450;\n");

		}

      out.write("\n");
      out.write("	var $bulkUpdateDialogTrigger = getDialogTrigger($(target).parent(), dialogOption);\n");
      out.write("	$bulkUpdateDialogTrigger.click();\n");
      out.write("\n");
      out.write("	var oid = [];\n");
      out.write("	var version = [];\n");

		if (section.getExclusiveControlPoint() == ExclusiveControlPoint.WHEN_SEARCH) {

      out.write("\n");
      out.write("	var timestamp = [];\n");

		}

      out.write("\n");
      out.write("	for(var i=0; i< ids.length; ++i) {\n");
      out.write("		var id = ids[i];\n");
      out.write("		var row = grid.getRowData(id);\n");

		if (section.isGroupingData()) {

      out.write("\n");
      out.write("		if (i > 0) {\n");
      out.write("			var beforeRow = grid.getRowData(ids[i - 1]);\n");
      out.write("			if (beforeRow.orgOid == row.orgOid && beforeRow.orgVersion == row.orgVersion) {\n");
      out.write("				");
      out.write("\n");
      out.write("				continue;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		");
      out.write("\n");
      out.write("		id = oid.length + 1;\n");

		}

      out.write("\n");
      out.write("		oid.push(id + \"_\" + row.orgOid);\n");
      out.write("		version.push(id + \"_\" + row.orgVersion);\n");

		if (section.getExclusiveControlPoint() == ExclusiveControlPoint.WHEN_SEARCH) {

      out.write("\n");
      out.write("		timestamp.push(id + \"_\" + row.orgTimestamp);\n");

		}

      out.write("\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var target = getModalTarget(isSubModal);\n");
      out.write("	var action = contextPath + '/' + '");
      out.print(StringUtil.escapeJavaScript(bulkEditAction) );
      out.write("';\n");
      out.write("	var $form = $(\"<form />\").attr({method:\"POST\", action:action, target:target}).appendTo(\"body\");\n");
      out.write("\n");
      out.write("	$(oid).each(function() {\n");
      out.write("		$(\"<input />\").attr({type:\"hidden\", name:\"oid\", value:this}).appendTo($form);\n");
      out.write("	});\n");
      out.write("	$(version).each(function() {\n");
      out.write("		$(\"<input />\").attr({type:\"hidden\", name:\"version\", value:this}).appendTo($form);\n");
      out.write("	});\n");

		if (section.getExclusiveControlPoint() == ExclusiveControlPoint.WHEN_SEARCH) {

      out.write("\n");
      out.write("	$(timestamp).each(function() {\n");
      out.write("		$(\"<input />\").attr({type:\"hidden\", name:\"timestamp\", value:this}).appendTo($form);\n");
      out.write("	});\n");

		}

      out.write("\n");
      out.write("	var searchCond = $(\":hidden[name='searchCond']\").val();\n");
      out.write("	$(\"<input />\").attr({type:\"hidden\", name:\"searchCond\", value:searchCond}).appendTo($form);\n");
      out.write("\n");
      out.write("	if ($(\"#cb_searchResult\").is(\":checked\")) {\n");
      out.write("		$(\"<input />\").attr({type:\"hidden\", name:\"selectAllPage\", value:true}).appendTo($form);\n");
      out.write("	}\n");
      out.write("// 	var execType = $(\":hidden[name='execType']\").val();\n");
      out.write("// 	$(\"<input />\").attr({type:\"hidden\", name:\"execType\", value:execType}).appendTo($form);\n");
      out.write("	var isSubModal = $(\"body.modal-body\").length !== 0;\n");
      out.write("	if (isSubModal) $(\"<input />\").attr({type:\"hidden\", name:\"modalTarget\", value:target}).appendTo($form);\n");
      out.write("	$form.submit();\n");
      out.write("	$form.remove();\n");
      out.write("}\n");
      out.write("\n");
      out.write("function closeBulkUpdateModalWindow() {\n");
      out.write("	var isSubModal = $(\"body.modal-body\").length !== 0;\n");
      out.write("	var target = getModalTarget(isSubModal);\n");
      out.write("	$(\"iframe[name='\" + target + \"']\").parents(\"div.modal-dialog\").find(\".modal-close\").click();\n");
      out.write("}\n");
      out.write("</script>\n");

	}

	if (OutputType.MULTISELECT == type && permitConditionSelectAll) {
		// 全ページor現在ページ選択

      out.write("<div id=\"selectSelectAllTypeDialog\" class=\"mtp-jq-dialog\" title=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.selectSelectAllType')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" style=\"display:none;\">\n");
      out.write("<ul style=\"text-align:left; margin-left:15px;\">\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"selectAllType\" value=\"all\" checked>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.selectAllPage\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</label>\n");
      out.write("</li>\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"selectAllType\" value=\"current\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.selectCurrentPage\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</label>\n");
      out.write("</li>\n");
 		if (multiplicity != -1) { 
      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(1207,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("multiplicity");
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(1207,0) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(multiplicity);
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      out.write("<li class=\"selectalltype-message\">\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rsp(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.selectAllTypeMessage\", multiplicity)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_2));
      out.write("</li>\n");
 		} 
      out.write("</ul>\n");
      out.write("</div>\n");
      out.write("<div id=\"selectDeselectAllTypeDialog\" class=\"mtp-jq-dialog\" title=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.selectDeselectAllType')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\" style=\"display:none;\">\n");
      out.write("<ul style=\"text-align:left; margin-left:15px;\">\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"deselectAllType\" value=\"all\" checked>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.selectAllPage\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</label>\n");
      out.write("</li>\n");
      out.write("<li>\n");
      out.write("<label><input type=\"radio\" name=\"deselectAllType\" value=\"current\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.selectCurrentPage\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</label>\n");
      out.write("</li>\n");
      out.write("</ul>\n");
      out.write("</div>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("$(function() {\n");
      out.write("	$(\"#selectSelectAllTypeDialog\").dialog({\n");
      out.write("		resizable: false,\n");
      out.write("		autoOpen: false,\n");
      out.write("		height: 180,\n");
      out.write("		width: 280,\n");
      out.write("		modal: true,\n");
      out.write("		buttons: {\n");
      out.write("			\"OK\": function() {\n");
      out.write("				var selectAllType = $(\":radio[name='selectAllType']:checked\").val();\n");
      out.write("				if (selectAllType == \"all\") {\n");
      out.write("					selectAllPage();\n");
      out.write("					keepSelectAllStatus = true;\n");
      out.write("				} else {\n");
      out.write("					selectCurrentPage();\n");
      out.write("					keepSelectAllStatus = false;\n");
      out.write("				}\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("				$(\"#cb_searchResult\").prop(\"checked\", true);\n");
      out.write("			},\n");
      out.write("			\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.cancel\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\": function() {\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("			}\n");
      out.write("		},\n");
      out.write("		close: function() {\n");
      out.write("			$(\"#cb_searchResult\").prop(\"checked\", false);\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	$(\"#selectSelectAllTypeDialog\").bind(\"dialogopen\", function(e) {\n");
      out.write("		adjustDialogLayer($(\".ui-widget-overlay\"));\n");
      out.write("	});\n");
      out.write("	$(\"#selectDeselectAllTypeDialog\").dialog({\n");
      out.write("		resizable: false,\n");
      out.write("		autoOpen: false,\n");
      out.write("		height: 160,\n");
      out.write("		width: 280,\n");
      out.write("		modal: true,\n");
      out.write("		buttons: {\n");
      out.write("			\"OK\": function() {\n");
      out.write("				var deselectAllType = $(\":radio[name='deselectAllType']:checked\").val();\n");
      out.write("				if (deselectAllType == \"all\") {\n");
      out.write("					deselectAllPage();\n");
      out.write("				} else {\n");
      out.write("					deselectCurrentPage();\n");
      out.write("				}\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("				keepSelectAllStatus = false;\n");
      out.write("				$(\"#cb_searchResult\").prop(\"checked\", false);\n");
      out.write("			},\n");
      out.write("			\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.element.section.SearchResultSection.cancel\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("\": function() {\n");
      out.write("				$(this).dialog(\"close\");\n");
      out.write("			}\n");
      out.write("		},\n");
      out.write("		close: function() {\n");
      out.write("			$(\"#cb_searchResult\").prop(\"checked\", true);\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	$(\"#selectDeselectAllTypeDialog\").bind(\"dialogopen\", function(e) {\n");
      out.write("		adjustDialogLayer($(\".ui-widget-overlay\"));\n");
      out.write("	});\n");
      out.write("});\n");
      out.write("function selectAllPage() {\n");
      out.write("	var type = $(\":hidden[name='searchType']\").val();\n");
      out.write("	if (!validation(type)) return;\n");
      out.write("\n");
      out.write("	searchSelectList(\"");
      out.print(SearchSelectListCommand.WEBAPI_NAME);
      out.write("\", type, type + \"Form\", function(data) {\n");
      out.write("		if (multiplicity == -1) {\n");
      out.write("			selectArray = data;\n");
      out.write("		} else {\n");
      out.write("			if (selectArray.length < multiplicity) {");
      out.write("\n");
      out.write("				for (var i = 0; i < data.length; i++) {\n");
      out.write("					if (selectArray.indexOf(data[i]) == -1) {\n");
      out.write("						selectArray.push(data[i]);\n");
      out.write("					}\n");
      out.write("					if (selectArray.length == multiplicity) {\n");
      out.write("						break;\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		loading = true;\n");
      out.write("\n");
      out.write("		grid.resetSelection();\n");
      out.write("		applyGridSelection();\n");
      out.write("\n");
      out.write("		loading = false;\n");
      out.write("\n");
      out.write("		$(\"#cb_searchResult\").prop(\"checked\", true);\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("function deselectAllPage() {\n");
      out.write("	selectArray = [];\n");
      out.write("	grid.resetSelection();\n");
      out.write("}\n");
      out.write("</script>\n");

	}

      out.write("<input type=\"hidden\" name=\"searchCond\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(1324,46) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(searchCond);
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      out.write("\">\n");
      out.write("<input type=\"hidden\" name=\"executeSearch\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent(null);
      // /jsp/gem/generic/element/section/SearchResultSection.jsp(1325,49) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue(executeSearch);
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      out.write("\">\n");
      out.write("</form>\n");
      out.write("</div>\n");
      out.write("<div id=\"blockLayer\" style=\"display:none;\"><p class=\"loading\"></p></div>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
