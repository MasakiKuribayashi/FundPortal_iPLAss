/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-27 05:28:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.generic.editor.timestamp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Timestamp;
import java.text.*;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.iplass.mtp.impl.core.ExecuteContext;
import org.iplass.mtp.util.DateUtil;
import org.iplass.mtp.util.StringUtil;
import org.iplass.mtp.view.generic.editor.DateTimeFormatSetting;
import org.iplass.mtp.view.generic.editor.DateTimePropertyEditor.DateTimeDisplayType;
import org.iplass.mtp.view.generic.editor.DateTimePropertyEditor.TimeDispRange;
import org.iplass.mtp.view.generic.editor.TimestampPropertyEditor;
import org.iplass.mtp.view.generic.EntityViewUtil;
import org.iplass.mtp.web.template.TemplateUtil;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.ViewUtil;

public final class TimestampPropertyEditor_005fCondition_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


	boolean formatCheck(String value) {
		if (value == null) return true;
		SimpleDateFormat format = DateUtil.getSimpleDateFormat(TemplateUtil.getLocaleFormat().getServerDateTimeFormat(), false);
		format.setLenient(false);
		try {
			format.parse(value);
		} catch (ParseException e) {
			return false;
		}
		return true;
	}


	String displayFormat(String time, TimeDispRange dispRange, String datetimeFormatPattern, String datetimeLocale, boolean showWeekday) {
		if (time == null) {
			return "";
		}
		DateFormat format = null;

		if(datetimeFormatPattern != null){
			format = ViewUtil.getDateTimeFormat(datetimeFormatPattern, datetimeLocale);
		} else {
			String timeFormat = "";
			if (TimeDispRange.isDispSec(dispRange)) {
				timeFormat = " " + TemplateUtil.getLocaleFormat().getOutputTimeSecFormat();
			} else if (TimeDispRange.isDispMin(dispRange)) {
				timeFormat = " " + TemplateUtil.getLocaleFormat().getOutputTimeMinFormat();
			} else if (TimeDispRange.isDispHour(dispRange)) {
				timeFormat = " " + TemplateUtil.getLocaleFormat().getOutputTimeHourFormat();
			}


			if (showWeekday) {
				String dateFormat = TemplateUtil.getLocaleFormat().getOutputDateWeekdayFormat();
				//テナントのロケールと言語が違う場合、編集画面と曜日の表記が変わるため、LangLocaleを利用
				format = DateUtil.getSimpleDateFormat(dateFormat + timeFormat, true, true);
			} else {
				String dateFormat = TemplateUtil.getLocaleFormat().getOutputDateFormat();
				format = DateUtil.getSimpleDateFormat(dateFormat + timeFormat, true);
			}
		}

		try {
			SimpleDateFormat serverFormat = DateUtil.getSimpleDateFormat(TemplateUtil.getLocaleFormat().getServerDateTimeFormat(), false);
			return format.format(new Timestamp(serverFormat.parse(time).getTime()));
		} catch (ParseException e) {
			return "";
		}
	}


private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rs", org.iplass.mtp.web.template.ELFunctions.class, "rs", new Class[] {java.lang.String.class, java.lang.String.class});
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/mtp.tld", Long.valueOf(1738207446000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(20);
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.TimestampPropertyEditor");
    _jspx_imports_classes.add("java.sql.Timestamp");
    _jspx_imports_classes.add("org.iplass.mtp.impl.core.ExecuteContext");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.EntityViewUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.DateTimePropertyEditor.DateTimeDisplayType");
    _jspx_imports_classes.add("org.iplass.mtp.util.StringUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.DateTimePropertyEditor.TimeDispRange");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.iplass.mtp.util.DateUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.editor.DateTimeFormatSetting");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	TimestampPropertyEditor editor = (TimestampPropertyEditor) request.getAttribute(Constants.EDITOR_EDITOR);

	String[] propValue = (String[]) request.getAttribute(Constants.EDITOR_PROP_VALUE);
	String[] defaultValue = (String[]) request.getAttribute(Constants.EDITOR_DEFAULT_VALUE);

	Map<String, List<String>> searchCondMap = (Map<String, List<String>>)request.getAttribute(Constants.SEARCH_COND_MAP);
	String displayLabel = (String) request.getAttribute(Constants.EDITOR_DISPLAY_LABEL);
	Boolean required = (Boolean) request.getAttribute(Constants.EDITOR_REQUIRED);
	if (required == null) required = false;

	String propName = editor.getPropertyName();

	String propValueFrom = "";
	String[] propValueFromArray = ViewUtil.getSearchCondValue(searchCondMap, Constants.SEARCH_COND_PREFIX + propName + "From");
	if (propValueFromArray != null && propValueFromArray.length > 0) {
		propValueFrom = propValueFromArray[0];
	} else {
		//初期値から復元(検索時に未指定の場合、ここにくる)
		if (propValue != null && propValue.length > 0 && formatCheck(propValue[0])) {
			propValueFrom = propValue[0];
		} else {
			propValueFrom = "";
		}
	}

	String propValueTo = "";
	String[] propValueToArray = ViewUtil.getSearchCondValue(searchCondMap, Constants.SEARCH_COND_PREFIX + propName + "To");
	if (propValueToArray != null && propValueToArray.length > 0) {
		propValueTo = propValueToArray[0];
	} else {
		//初期値から復元(検索時に未指定の場合、ここにくる)
		if (propValue != null && propValue.length > 1 && formatCheck(propValue[1])) {
			propValueTo = propValue[1];
		} else {
			propValueTo = "";
		}
	}

	if (ViewUtil.isAutocompletionTarget()) {
		request.setAttribute(Constants.AUTOCOMPLETION_EDITOR, editor);
		request.setAttribute(Constants.AUTOCOMPLETION_SCRIPT_PATH, "/jsp/gem/generic/editor/timestamp/TimestampPropertyAutocompletion.jsp");
	}

	boolean isUserDateTimePicker = editor.isUseDatetimePicker();
	if (TimeDispRange.NONE.equals(editor.getDispRange())) {
		isUserDateTimePicker = false;
	}
	boolean showDatetimePicker = editor.getDisplayType() != DateTimeDisplayType.LABEL && isUserDateTimePicker;
	boolean showLabel = editor.getDisplayType() == DateTimeDisplayType.LABEL;


	if (editor.getDisplayType() != DateTimeDisplayType.HIDDEN) {
		//HIDDEN以外

		boolean hideFrom = editor.isSingleDayCondition() ? false : editor.isHideSearchConditionFrom();
		boolean hideTo = editor.isSingleDayCondition() ? true : editor.isHideSearchConditionTo();

		editor.setPropertyName(Constants.SEARCH_COND_PREFIX + propName + "From");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_NAME, propName + "0");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_VALUE, propValueFrom);

		String style = "";
		if (hideFrom) {
			style = "display: none;";
		}

		String defaultValueFrom = "";
		if (defaultValue != null && defaultValue.length > 0 && formatCheck(defaultValue[0])) {
			defaultValueFrom = defaultValue[0];
		}
		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_VALUE, defaultValueFrom);

		String customStyle = "";
		if (showLabel) {
			//カスタムスタイル
			String rootDefName = (String)request.getAttribute(Constants.ROOT_DEF_NAME);
			String scriptKey = (String)request.getAttribute(Constants.SECTION_SCRIPT_KEY);
			if (StringUtil.isNotEmpty(editor.getCustomStyle())) {
				customStyle = EntityViewUtil.getCustomStyle(rootDefName, scriptKey, editor.getOutputCustomStyleScriptKey(), null, null);
			}
			style = style + customStyle;
		}

		DateTimeFormatSetting formatInfo = ViewUtil.getFormatInfo(editor.getLocalizedDatetimeFormatList(), editor.getDatetimeFormat());

		if (showDatetimePicker) {

      out.write("<span class=\"timestamppicker-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(180,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(style );
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write('"');
      out.write('>');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "TimestampTimepicker.jsp", out, false);
      out.write("</span>\n");

		} else if (showLabel) {
			String timeFromDisplayValue = displayFormat(propValueFrom, editor.getDispRange(), formatInfo.getDatetimeFormat(), formatInfo.getDatetimeLocale(), editor.isShowWeekday());
			String timeFromHiddenName = Constants.SEARCH_COND_PREFIX + propName + "From";

      out.write("<span class=\"timestampselect-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(188,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(style );
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write('"');
      out.write('>');
      out.write('\n');
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(189,0) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(timeFromDisplayValue );
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      out.write("<input data-norewrite=\"true\" type=\"hidden\" name=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f3 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f3.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(190,49) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f3.setValue(timeFromHiddenName );
      int _jspx_eval_c_005fout_005f3 = _jspx_th_c_005fout_005f3.doStartTag();
      if (_jspx_th_c_005fout_005f3.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f3);
      out.write("\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f4 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f4.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(190,99) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f4.setValue(propValueFrom );
      int _jspx_eval_c_005fout_005f4 = _jspx_th_c_005fout_005f4.doStartTag();
      if (_jspx_th_c_005fout_005f4.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f4);
      out.write("\" />\n");
      out.write("</span>\n");

		} else {

      out.write("<span class=\"timestampselect-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f5 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f5.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f5.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(195,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f5.setValue(style );
      int _jspx_eval_c_005fout_005f5 = _jspx_th_c_005fout_005f5.doStartTag();
      if (_jspx_th_c_005fout_005f5.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f5);
      out.write('"');
      out.write('>');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Timestamp.jsp", out, false);
      out.write("</span>\n");

		}

		if (!editor.isSingleDayCondition()) {
			if ((!editor.isHideSearchConditionFrom() && !editor.isHideSearchConditionTo())
					|| !editor.isHideSearchConditionRangeSymbol()) {

      out.write("<span class=\"range-symbol\">&nbsp;");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.editor.common.rangeSymbol')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("&nbsp;</span>\n");

			}
		}

		editor.setPropertyName(Constants.SEARCH_COND_PREFIX + propName + "To");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_NAME, propName + "1");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_VALUE, propValueTo);

		style = "";
		if (hideTo) {
			style = "display: none;";
		}
		if (showLabel) {
			style = style + customStyle;
		}

		String defaultValueTo = "";
		if (defaultValue != null && defaultValue.length > 1 && formatCheck(defaultValue[1])) {
			defaultValueTo = defaultValue[1];
		}
		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_VALUE, defaultValueTo);

		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_HOUR, "23");
		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_MIN, "59");
		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_SEC, "59");
		request.setAttribute(Constants.EDITOR_PICKER_DEFAULT_MSEC, "999");

		if (showDatetimePicker) {

      out.write("<span class=\"timestamppicker-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f6 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f6.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f6.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(235,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f6.setValue(style );
      int _jspx_eval_c_005fout_005f6 = _jspx_th_c_005fout_005f6.doStartTag();
      if (_jspx_th_c_005fout_005f6.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f6);
      out.write('"');
      out.write('>');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "TimestampTimepicker.jsp", out, false);
      out.write("</span>\n");

		} else if (showLabel) {
			String timeToDisplayValue = displayFormat(propValueTo, editor.getDispRange(), formatInfo.getDatetimeFormat(), formatInfo.getDatetimeLocale(), editor.isShowWeekday());
			String timeToHiddenName = Constants.SEARCH_COND_PREFIX + propName + "To";

      out.write("<span class=\"timestampselect-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f7 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f7.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f7.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(243,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f7.setValue(style );
      int _jspx_eval_c_005fout_005f7 = _jspx_th_c_005fout_005f7.doStartTag();
      if (_jspx_th_c_005fout_005f7.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f7);
      out.write('"');
      out.write('>');
      out.write('\n');
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f8 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f8.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f8.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(244,0) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f8.setValue(timeToDisplayValue );
      int _jspx_eval_c_005fout_005f8 = _jspx_th_c_005fout_005f8.doStartTag();
      if (_jspx_th_c_005fout_005f8.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f8);
      out.write("<input data-norewrite=\"true\" type=\"hidden\" name=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f9 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f9.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f9.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(245,49) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f9.setValue(timeToHiddenName );
      int _jspx_eval_c_005fout_005f9 = _jspx_th_c_005fout_005f9.doStartTag();
      if (_jspx_th_c_005fout_005f9.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f9);
      out.write("\" value=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f10 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f10.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f10.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(245,97) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f10.setValue(propValueTo );
      int _jspx_eval_c_005fout_005f10 = _jspx_th_c_005fout_005f10.doStartTag();
      if (_jspx_th_c_005fout_005f10.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f10);
      out.write("\" />\n");
      out.write("</span>\n");

		} else {

      out.write("<span class=\"timestampselect-field\" style=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f11 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f11.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f11.setParent(null);
      // /jsp/gem/generic/editor/timestamp/TimestampPropertyEditor_Condition.jsp(250,43) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f11.setValue(style );
      int _jspx_eval_c_005fout_005f11 = _jspx_th_c_005fout_005f11.doStartTag();
      if (_jspx_th_c_005fout_005f11.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f11);
      out.write('"');
      out.write('>');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Timestamp.jsp", out, false);
      out.write("</span>\n");

		}

		request.removeAttribute(Constants.EDITOR_PICKER_PROP_NAME);
		request.removeAttribute(Constants.EDITOR_PICKER_DEFAULT_HOUR);
		request.removeAttribute(Constants.EDITOR_PICKER_DEFAULT_MIN);
		request.removeAttribute(Constants.EDITOR_PICKER_DEFAULT_SEC);
		request.removeAttribute(Constants.EDITOR_PICKER_DEFAULT_MSEC);
		editor.setPropertyName(propName);

      out.write("<script type=\"text/javascript\">\n");
      out.write("$(function() {\n");

		if (required) {

      out.write("\n");
      out.write("	addNormalValidator(function() {\n");
      out.write("		var fromVal = $(\":hidden[name='\" + es(\"");
      out.print(StringUtil.escapeJavaScript(Constants.SEARCH_COND_PREFIX + propName + "From"));
      out.write("\") + \"']\").val();\n");
      out.write("		var toVal = $(\":hidden[name='\" + es(\"");
      out.print(StringUtil.escapeJavaScript(Constants.SEARCH_COND_PREFIX + propName + "To"));
      out.write("\") + \"']\").val();\n");
      out.write("		if ((typeof fromVal === \"undefined\" || fromVal == null || fromVal == \"\")\n");
      out.write("				&& (typeof toVal === \"undefined\" || toVal == null || toVal == \"\")) {\n");
      out.write("			alert(scriptContext.gem.locale.common.requiredMsg.replace(\"{0}\", \"");
      out.print(StringUtil.escapeJavaScript(displayLabel));
      out.write("\"));\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		return true;\n");
      out.write("	});\n");

		}
		if (showDatetimePicker) {
		//フォーマットチェック(DatetimePicker)

      out.write("\n");
      out.write("	addNormalValidator(function() {\n");
      out.write("		var $from = $(\"#datetime_\" + es(\"");
      out.print(StringUtil.escapeJavaScript(propName + "0"));
      out.write("\"));\n");
      out.write("		var fromVal = $from.val();\n");
      out.write("		var dateFormat = dateUtil.getInputDateFormat();\n");
      out.write("		var timeFormat = $from.attr(\"data-timeformat\");\n");
      out.write("		var fixedmin = $from.attr(\"data-fixedmin\");\n");
      out.write("		var fixedsec = $from.attr(\"data-fixedsec\");\n");
      out.write("		if (typeof fromVal !== \"undefined\" && fromVal !== null && fromVal !== \"\") {\n");
      out.write("			try {\n");
      out.write("				validateTimestampPicker(fromVal, dateFormat, timeFormat, fixedmin, fixedsec);\n");
      out.write("			} catch (e) {\n");
      out.write("				alert(messageFormat(scriptContext.gem.locale.common.timestampFormatErrorMsg, \"");
      out.print(StringUtil.escapeJavaScript(displayLabel));
      out.write("\", dateFormat + \" \" + timeFormat))\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		var $to = $(\"#datetime_\" + es(\"");
      out.print(StringUtil.escapeJavaScript(propName + "1"));
      out.write("\"));\n");
      out.write("		var toVal = $to.val();\n");
      out.write("		timeFormat = $to.attr(\"data-timeformat\");\n");
      out.write("		if (typeof toVal !== \"undefined\" && toVal !== null && toVal !== \"\") {\n");
      out.write("			try {\n");
      out.write("				validateTimestampPicker(toVal, dateFormat, timeFormat, fixedmin, fixedsec);\n");
      out.write("			} catch (e) {\n");
      out.write("				alert(messageFormat(scriptContext.gem.locale.common.timestampFormatErrorMsg, \"");
      out.print(StringUtil.escapeJavaScript(displayLabel));
      out.write("\", dateFormat + \" \" + timeFormat))\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		return true;\n");
      out.write("	});\n");

		}
		if (!showDatetimePicker && !showLabel) {
			//フォーマットチェック(DatePicker)

      out.write("\n");
      out.write("	addNormalValidator(function() {\n");
      out.write("		var fromVal = $(\"#d_\" + es(\"");
      out.print(StringUtil.escapeJavaScript(propName + "0"));
      out.write("\")).val();\n");
      out.write("		var toVal = $(\"#d_\" + es(\"");
      out.print(StringUtil.escapeJavaScript(propName + "1"));
      out.write("\")).val();\n");
      out.write("		if (typeof fromVal !== \"undefined\" && fromVal != null && fromVal !== \"\") {\n");
      out.write("			try {\n");
      out.write("				validateDate(fromVal, dateUtil.getInputDateFormat(), \"\");\n");
      out.write("			} catch (e) {\n");
      out.write("				alert(messageFormat(scriptContext.gem.locale.common.dateFormatErrorMsg, \"");
      out.print(StringUtil.escapeJavaScript(displayLabel));
      out.write("\", dateUtil.getInputDateFormat()))\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		if (typeof toVal !== \"undefined\" && toVal != null && toVal !== \"\") {\n");
      out.write("			try {\n");
      out.write("				validateDate(toVal, dateUtil.getInputDateFormat(), \"\");\n");
      out.write("			} catch (e) {\n");
      out.write("				alert(messageFormat(scriptContext.gem.locale.common.dateFormatErrorMsg, \"");
      out.print(StringUtil.escapeJavaScript(displayLabel));
      out.write("\", dateUtil.getInputDateFormat()))\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		return true;\n");
      out.write("	});\n");

		}

      out.write("\n");
      out.write("});\n");
      out.write("</script>\n");

	} else {
		//HIDDEN

		editor.setPropertyName(Constants.SEARCH_COND_PREFIX + propName + "From");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_NAME, propName + "0");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_VALUE, propValueFrom);
		if (isUserDateTimePicker) {

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "TimestampTimepicker.jsp", out, false);

		} else {

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Timestamp.jsp", out, false);

		}

		editor.setPropertyName(Constants.SEARCH_COND_PREFIX + propName + "To");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_NAME, propName + "1");
		request.setAttribute(Constants.EDITOR_PICKER_PROP_VALUE, propValueTo);
		if (isUserDateTimePicker) {

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "TimestampTimepicker.jsp", out, false);

		} else {

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Timestamp.jsp", out, false);

		}

		request.removeAttribute(Constants.EDITOR_PICKER_PROP_NAME);
		request.removeAttribute(Constants.EDITOR_PICKER_PROP_VALUE);
		editor.setPropertyName(propName);
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
