/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-28 07:43:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.gem.generic.search;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import org.iplass.mtp.auth.AuthContext;
import org.iplass.mtp.entity.permission.EntityPermission;
import org.iplass.mtp.entity.definition.*;
import org.iplass.mtp.entity.definition.properties.*;
import org.iplass.mtp.entity.Entity;
import org.iplass.mtp.view.generic.*;
import org.iplass.mtp.view.generic.editor.*;
import org.iplass.mtp.view.generic.element.property.PropertyColumn;
import org.iplass.mtp.view.generic.element.section.SearchResultSection;
import org.iplass.mtp.view.generic.element.Element;
import org.iplass.mtp.view.generic.element.VirtualPropertyItem;
import org.iplass.mtp.view.top.parts.EntityListParts;
import org.iplass.mtp.util.StringUtil;
import org.iplass.mtp.web.template.TemplateUtil;
import org.iplass.mtp.ManagerLocator;
import org.iplass.gem.command.generic.detail.DetailViewCommand;
import org.iplass.gem.command.generic.search.*;
import org.iplass.gem.command.Constants;
import org.iplass.gem.command.MenuCommand;
import org.iplass.gem.command.ViewUtil;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


	boolean isDispProperty(String defName, PropertyDefinition pd, PropertyColumn property) {
		if (!EntityViewUtil.isDisplayElement(defName, property.getElementRuntimeId(), OutputType.SEARCHRESULT, null)) return false;
		if (property.getEditor() == null) return false;
		return true;
	}
	boolean isDispProperty(PropertyDefinition pd, NestProperty property) {
		if (property.getEditor() == null) return false;
		return true;
	}

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1;
private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:esc", org.iplass.mtp.web.template.ELFunctions.class, "esc", new Class[] {java.lang.String.class});
  _jspx_fnmap_1= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:rs", org.iplass.mtp.web.template.ELFunctions.class, "rs", new Class[] {java.lang.String.class, java.lang.String.class});
  _jspx_fnmap_2= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("m:escJs", org.iplass.mtp.web.template.ELFunctions.class, "escJs", new Class[] {java.lang.String.class});
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/mtp.tld", Long.valueOf(1740642050000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1737625086258L));
    _jspx_dependants.put("jar:file:/C:/pleiades/2024-12/workspace/Portal_Mock/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Portal_Mock/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(11);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic.editor");
    _jspx_imports_packages.add("org.iplass.mtp.entity.definition.properties");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("org.iplass.mtp.view.generic");
    _jspx_imports_packages.add("org.iplass.mtp.entity.definition");
    _jspx_imports_packages.add("org.iplass.gem.command.generic.search");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(26);
    _jspx_imports_classes.add("org.iplass.mtp.entity.Entity");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.sql.Timestamp");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.section.SearchResultSection");
    _jspx_imports_classes.add("org.iplass.gem.command.ViewUtil");
    _jspx_imports_classes.add("org.iplass.mtp.entity.permission.EntityPermission");
    _jspx_imports_classes.add("org.iplass.mtp.auth.AuthContext");
    _jspx_imports_classes.add("org.iplass.mtp.util.StringUtil");
    _jspx_imports_classes.add("org.iplass.mtp.view.top.parts.EntityListParts");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.iplass.mtp.ManagerLocator");
    _jspx_imports_classes.add("org.iplass.gem.command.Constants");
    _jspx_imports_classes.add("org.iplass.mtp.web.template.TemplateUtil");
    _jspx_imports_classes.add("org.iplass.gem.command.MenuCommand");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.Element");
    _jspx_imports_classes.add("java.text.ParseException");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.VirtualPropertyItem");
    _jspx_imports_classes.add("org.iplass.gem.command.generic.detail.DetailViewCommand");
    _jspx_imports_classes.add("org.iplass.mtp.view.generic.element.property.PropertyColumn");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	EntityListParts parts = (EntityListParts) request.getAttribute("entityListParts");
	if (parts == null) return;

	SearchFormView form = (SearchFormView) request.getAttribute("searchFormView");

	String topViewListOffsetInfo = request.getParameter(Constants.TOPVIEW_LIST_OFFSET);

	String topViewListOffsetKey = "";
	Integer topViewListOffset = 0;
	if (StringUtil.isNotEmpty(topViewListOffsetInfo)) {
		try {
			String[] info = topViewListOffsetInfo.split("\\.");
			topViewListOffsetKey = info[0];
			topViewListOffset = Integer.parseInt(info[1]);
		} catch (Exception e) {
		}
	}

	String searchType = "normal";
	if (StringUtil.isNotEmpty(parts.getFilterName())) {
		searchType = "fixed";
	}

	EntityDefinitionManager edm = ManagerLocator.getInstance().getManager(EntityDefinitionManager.class);
	EntityDefinition ed = edm.get(parts.getDefName());
	String defName = parts.getDefName();

	SearchResultSection section = form.getResultSection();

	//ビュー名があればアクションの後につける
	String urlPath = ViewUtil.getParamMappingPath(parts.getDefName(),
			parts.getViewNameForDetail() != null ? parts.getViewNameForDetail() : parts.getViewName());

	//詳細表示アクション
	String viewAction = "";
	if (StringUtil.isNotBlank(form.getViewActionName())) {
		viewAction = form.getViewActionName() +  urlPath;
	} else {
		viewAction = DetailViewCommand.VIEW_ACTION_NAME + urlPath;
	}

	//詳細編集アクション
	String detailAction = "";
	if (StringUtil.isNotBlank(form.getEditActionName())) {
		detailAction = form.getEditActionName() +  urlPath;
	} else {
		detailAction = DetailViewCommand.DETAIL_ACTION_NAME + urlPath;
	}

	//検索結果表示アクション
	urlPath = ViewUtil.getParamMappingPath(parts.getDefName(), parts.getViewNameForLink());
	String action = TemplateUtil.getTenantContextPath() + "/" + SearchViewCommand.SEARCH_ACTION_NAME + urlPath;
	String params = "{";
	params = params + "\"searchType\": \"" + searchType + "\"";
	params = params + ", \"filterName\": \"" + parts.getFilterName() + "\"";
	params = params + "}";

	//Limit
	Integer limit = ViewUtil.getSearchLimit(section);

	//Height
 	Integer gridHeight = parts.getHeight();
	if (gridHeight == null || gridHeight < 0) {
		gridHeight = 160;
	}
	
	// searchAsync
	boolean searchAsync = parts.isSearchAsync();

	AuthContext auth = AuthContext.getCurrentContext();
	boolean canUpdate = auth.checkPermission(new EntityPermission(ed.getName(), EntityPermission.Action.UPDATE));
	boolean canDelete = auth.checkPermission(new EntityPermission(ed.getName(), EntityPermission.Action.DELETE));

	//スタイルシートのクラス名
	String cellStyle = "entity-list topview-parts";
	if (StringUtil.isNotBlank(parts.getStyle())) {
		cellStyle = cellStyle + " " + parts.getStyle();
	}

      out.write("<div class=\"");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /jsp/gem/generic/search/list.jsp(141,12) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue(cellStyle );
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      out.write("\" id=\"topview-parts-id_");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${partsCnt}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" style=\"display:none;\">\n");
      out.write("<h3 class=\"hgroup-02\">\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${entityListParts.iconTag}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:esc(title)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("</h3>\n");

	String id = ((int)(Math.random() * 1000) + "_" + new Date().getTime());

      out.write("<form id=\"form_");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /jsp/gem/generic/search/list.jsp(149,15) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue(id);
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      out.write("\" class=\"flat-block-top\">\n");
      out.write("<table id=\"searchResult_");
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /jsp/gem/generic/search/list.jsp(150,24) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue(id);
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      out.write("\"></table>\n");
      out.write("</form>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("$(function() {\n");
      out.write("	var cellAttrFunc = function (rowId, val, rowObject, colModel, rdata) {\n");

	if (section.isGroupingData()) {

      out.write("\n");
      out.write("		var rowIndex = parseInt(rowId) - 1;\n");
      out.write("		var data = grid.getGridParam(\"_data\");\n");
      out.write("		var row = data[rowIndex];\n");
      out.write("		var colName = colModel.name;\n");
      out.write("		if (rowIndex > 0) {\n");
      out.write("			var beforeRow = data[rowIndex - 1];\n");
      out.write("			//前の行と値が同じか確認\n");
      out.write("			var dif = false;\n");
      out.write("			if (row.orgOid != beforeRow.orgOid || row.orgVersion != beforeRow.orgVersion || row[colName] != beforeRow[colName]) {\n");
      out.write("				dif = true;\n");
      out.write("			}\n");
      out.write("			//同じ場合は非表示にする、タイトルを指定しないと(\"\"含む)CELL値が設定されるので指定\n");
      out.write("			if (!dif) return \" title=\\\"&nbsp;\\\" style=\\\"display:none;\\\" \";\n");
      out.write("		}\n");
      out.write("		//この行から何行分rowspanを設定するか計算\n");
      out.write("		var count = 0;\n");
      out.write("		for (var i = rowIndex; i < data.length; i++) {\n");
      out.write("			if (i >= data.length) break;\n");
      out.write("			var nextRow = data[i];\n");
      out.write("			var dif = false;\n");
      out.write("			if (row.orgOid != nextRow.orgOid || row.orgVersion != nextRow.orgVersion || row[colName] != nextRow[colName]) {\n");
      out.write("				dif = true;\n");
      out.write("				break;\n");
      out.write("			}\n");
      out.write("			if (!dif) count++;\n");
      out.write("			else break;\n");
      out.write("		}\n");
      out.write("		if (count > 1) {\n");
      out.write("			var label = $.jgrid.stripHtml(rdata[colModel.name]).replace(/'/g, \"&apos;\");\n");
      out.write("			if (!label || typeof label === \"undefined\") {\n");
      out.write("				//タイトルを指定しないと(\"\"含む)CELL値が設定されるので指定\n");
      out.write("				label = \"&nbsp;\";\n");
      out.write("			}\n");
      out.write("			return \" title=\\\"\" + label + \"\\\" style=\\\"vertical-align: center !important;\\\" rowspan=\\\"\" + count + \"\\\"\";\n");
      out.write("		} else {\n");
      out.write("			return null;\n");
      out.write("		}\n");

	} else {

      out.write("\n");
      out.write("		//definitionの設定がfalseなら結合しない\n");
      out.write("		return null;\n");

	}

      out.write("\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var clearRowHighlight = function(rowIndex) {\n");
      out.write("		var $rows = $(\"#searchResult_");
      out.print(id);
      out.write(" tr.jqgrow\");\n");
      out.write("		if (rowIndex >= $rows.length) return;\n");
      out.write("		//選択された行以外にハイライトをクリアします。\n");
      out.write("		$rows.each(function(index) {\n");
      out.write("			if (index != rowIndex) $(this).removeClass(\"ui-state-highlight\");\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var colModel = new Array();\n");
      out.write("	colModel.push({name:\"orgOid\", idnex:\"orgOid\", sortable:false, hidden:true, frozen:true, label:\"oid\", formatter:oidCellFormatter});\n");
      out.write("	colModel.push({name:\"orgVersion\", idnex:\"orgVersion\", sortable:false, hidden:true, frozen:true, label:\"version\"});\n");
      out.write("	colModel.push({name:'_mtpDetailLink', index:'_mtpDetailLink', width:");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.search.list.detailLinkWidth\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write(", sortable:false, align:'center', frozen:true, label:\"\", classes:\"detail-links\", cellattr: cellAttrFunc});\n");


	for (Element element : section.getElements()) {
		if (element instanceof PropertyColumn) {
			PropertyColumn property = (PropertyColumn) element;
			String propName = property.getPropertyName();
			PropertyDefinition pd = EntityViewUtil.getPropertyDefinition(propName, ed);
			String displayLabel = TemplateUtil.getMultilingualString(property.getDisplayLabel(), property.getLocalizedDisplayLabelList(), pd.getDisplayName(), pd.getLocalizedDisplayNameList());

			if (isDispProperty(defName, pd, property)) {
				if (!(pd instanceof ReferenceProperty)) {
					String sortPropName = StringUtil.escapeHtml(propName);
					String width = "";
					if (property.getWidth() > 0) {
						width = ", width:" + property.getWidth();
					}
					String align = "";
					if (property.getTextAlign() != null) {
						align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
					}
					String style = property.getStyle() != null ? property.getStyle() : "";
					String sortable = "sortable:true";
					if (!property.isSortable() || !ViewUtil.getEntityViewHelper().isSortable(pd)) {
						sortable = "sortable:false";
					}
					String hidden = ", hidden:false";
					if (property.getEditor() != null && property.getEditor().isHide()) {
						hidden = ", hidden:true";
					}

      out.write("\n");
      out.write("	colModel.push({name:\"");
      out.print(sortPropName);
      out.write("\", index:\"");
      out.print(sortPropName);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", ");
      out.print(sortable);
      out.print(hidden);
      out.print(width);
      out.write(", cellattr: cellAttrFunc});\n");

				} else if (property.getEditor() instanceof ReferencePropertyEditor) {
					//参照型のName以外を表示する場合
					List<NestProperty> nest = ((ReferencePropertyEditor) property.getEditor()).getNestProperties();
					if (nest.size() == 0) {
						String sortPropName = StringUtil.escapeHtml(propName);
						String width = "";
						if (property.getWidth() > 0) {
							width = ", width:" + property.getWidth();
						}
						String align = "";
						if (property.getTextAlign() != null) {
							align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
						}
						String style = property.getStyle() != null ? property.getStyle() : "";
						String sortable = "sortable:true";
						if (!property.isSortable() || !ViewUtil.getEntityViewHelper().isSortable(pd)) {
							sortable = "sortable:false";
						}
						String hidden = ", hidden:false";
						if (property.getEditor() != null && property.getEditor().isHide()) {
							hidden = ", hidden:true";
						}

      out.write("\n");
      out.write("	colModel.push({name:\"");
      out.print(sortPropName);
      out.write("\", index:\"");
      out.print(sortPropName);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", ");
      out.print(sortable);
      out.print(hidden);
      out.print(width);
      out.write(", cellattr: cellAttrFunc});\n");

					} else if (nest.size() > 0) {
						String style = property.getStyle() != null ? property.getStyle() : "";
						request.setAttribute("nestPropName", propName);
						request.setAttribute("nestProperty", pd);
						request.setAttribute("nestStyle", style);
						request.setAttribute("nestEditor", property.getEditor());

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../element/section/SearchResultSection_Nest.jsp", out, false);

						request.removeAttribute("nestPropName");
						request.removeAttribute("nestProperty");
						request.removeAttribute("nestStyle");
						request.removeAttribute("nestEditor");
						request.removeAttribute("frozenColNum");
					}
				}
			}
		} else if (element instanceof VirtualPropertyItem) {
			VirtualPropertyItem property = (VirtualPropertyItem) element;
			String propName = StringUtil.escapeHtml(property.getPropertyName());
			String displayLabel = TemplateUtil.getMultilingualString(property.getDisplayLabel(), property.getLocalizedDisplayLabelList());
			String width = "";
			if (property.getWidth() > 0) {
				width = ", width:" + property.getWidth();
			}
			String align = "";
			if (property.getTextAlign() != null) {
				align = ", align:'" + property.getTextAlign().name().toLowerCase() + "'";
			}
			String hidden = ", hidden:false";
			if (property.getEditor() != null && property.getEditor().isHide()) {
				hidden = ", hidden:true";
			}
			String style = property.getStyle() != null ? property.getStyle() : "";

      out.write("\n");
      out.write("colModel.push({name:\"");
      out.print(propName);
      out.write("\", index:\"");
      out.print(propName);
      out.write("\", classes:\"");
      out.print(style);
      out.write("\", label:\"<p class='title'>");
      out.print(displayLabel);
      out.write("</p>\", sortable:false ");
      out.print(hidden);
      out.print(width);
      out.print(align);
      out.write(", cellattr: cellAttrFunc});\n");

		}
	}

      out.write("\n");
      out.write("	var $table = $(\"#searchResult_");
      out.print(id);
      out.write("\");\n");
      out.write("	var gridHeight = ");
      out.print(gridHeight);
      out.write(";\n");
      out.write("	var grid = $table.jqGrid({\n");
      out.write("		datatype: \"local\",\n");
      out.write("		autoencode: false,\n");
      out.write("		colModel: colModel,\n");
      out.write("		headertitles: true,\n");
      out.write("		height: gridHeight,\n");
      out.write("		multiselect: false,\n");
      out.write("		caption: \"Manipulating Array Data\",\n");
      out.write("		viewrecords: true,\n");
      out.write("		altRows: true,\n");
      out.write("		altclass:'myAltRowClass',\n");
      out.write("		onSortCol: function(index, iCol, sortorder) {\n");
      out.write("			var sortKey = index;\n");
      out.write("			var sortType = sortorder.toUpperCase();\n");
      out.write("\n");
      out.write("			var curSortKey = $table.attr(\"data-sortKey\");\n");
      out.write("			var curSortType = $table.attr(\"data-sortType\");\n");
      out.write("\n");
      out.write("			");
      out.write("\n");
      out.write("			$(\"#gview_searchResult_");
      out.print(id);
      out.write(" tr.ui-jqgrid-labels th .ui-jqgrid-sortable\").removeClass('asc desc');\n");
      out.write("			$(\"#gview_searchResult_");
      out.print(id);
      out.write(" tr.ui-jqgrid-labels th:eq(\" + iCol + \") .ui-jqgrid-sortable\").addClass(sortType.toLowerCase());\n");
      out.write("\n");
      out.write("			");
      out.write("\n");
      out.write("			if (sortKey !== curSortKey || sortType !== curSortType) {\n");
      out.write("				$table.attr(\"data-sortKey\", sortKey);\n");
      out.write("				$table.attr(\"data-sortType\", sortType);\n");
      out.write("				search();\n");
      out.write("			}\n");
      out.write("			return \"stop\";\n");
      out.write("		}\n");
      out.write("		,onSelectRow: function(rowid, e) {\n");
      out.write("			var row = grid.getRowData(rowid);\n");
      out.write("			var id = row.orgOid + \"_\" + row.orgVersion;\n");
      out.write("			var rowIndex = parseInt(rowid) - 1;\n");
      out.write("\n");
      out.write("			clearRowHighlight(rowIndex);\n");
      out.write("\n");
      out.write("			if (e) {\n");
      out.write("				$(\"#searchResult_");
      out.print(id);
      out.write(" tr[id]\").each(function() {\n");
      out.write("					var _rowid = $(this).attr(\"id\");\n");
      out.write("					if (_rowid == rowid) return;\n");
      out.write("					var _row = grid.getRowData(_rowid);\n");
      out.write("					var _id = _row.orgOid + \"_\" + _row.orgVersion;\n");
      out.write("					if (id == _id) $(this).addClass(\"ui-state-highlight\");\n");
      out.write("				});\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("\n");
      out.write("	var offset = 0;\n");
      out.write("	var limit = ");
      out.print(limit);
      out.write(";\n");
      out.write("\n");
      out.write("\n");
      out.write("	var $parent = $table.parents(\"div.entity-list\");\n");
      out.write("	var idname = $parent.attr(\"id\");\n");
      out.write("\n");
      out.write("	var topViewListOffset = ");
      out.print( topViewListOffset );
      out.write(";\n");
      out.write("	var topViewListOffsetKey = \"");
      out.print( StringUtil.escapeJavaScript(topViewListOffsetKey) );
      out.write("\";\n");
      out.write("	if (topViewListOffset != 0) {\n");
      out.write("		if (idname == topViewListOffsetKey) {\n");
      out.write("			offset = topViewListOffset;\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("\n");
      out.write("\n");
      out.write("	var $pager = $(\".result-nav\", $parent).pager({\n");
      out.write("		limit: limit,\n");
      out.write("		showPageLink: false,\n");
      out.write("		showPageJump: false,\n");
      out.write("		showItemCount: false,\n");
      out.write("		previewFunc: function(){\n");
      out.write("			offset -= limit;\n");
      out.write("			search();\n");
      out.write("		},\n");
      out.write("		nextFunc: function() {\n");
      out.write("			offset += limit;\n");
      out.write("			search();\n");
      out.write("		},\n");
      out.write("		hasNextFunc: function(offset, length, count, limit, notCount) {\n");
      out.write("			return length > limit;\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("\n");
      out.write("	search();\n");
      out.write("\n");
      out.write("	function search() {\n");
      out.write("\n");
      out.write("		var searchAsync = \"");
      out.print(searchAsync);
      out.write("\" == \"true\" ? true : false;\n");
      out.write("\n");
      out.write("		var entityListLink = $(\"#topview-parts-id_");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${partsCnt}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" \").find('.link-list-01.entity-list');\n");
      out.write("\n");
      out.write("		// 非同期の場合のみ読み込み中の表示設定をする\n");
      out.write("		if (searchAsync) {\n");
      out.write("			// \"読み込み中\"の表示と被らないようにデータをクリア\n");
      out.write("			grid.clearGridData(true);\n");
      out.write("\n");
      out.write("			var topviewParts = $(\"#topview-parts-id_");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${partsCnt}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\");\n");
      out.write("			topviewParts.show();\n");
      out.write("\n");
      out.write("			var loading = $(\"#load_searchResult_");
      out.print(id);
      out.write("\");\n");
      out.write("			loading.removeClass(\"ui-state-active\");\n");
      out.write("			loading.removeClass(\"ui-state-default\");\n");
      out.write("			loading.show();\n");
      out.write("			\n");
      out.write("			//　読み込み中はボタン行を非表示にする\n");
      out.write("			entityListLink.hide();\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var sortKey = $table.attr(\"data-sortKey\");\n");
      out.write("		var sortType = $table.attr(\"data-sortType\");\n");
      out.write("		searchEntityList(\"");
      out.print(SearchListCommand.WEBAPI_NAME);
      out.write("\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:escJs(entityListParts.defName)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_2));
      out.write("\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:escJs(entityListParts.viewName)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_2));
      out.write("\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:escJs(entityListParts.filterName)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_2));
      out.write("\", offset, sortKey, sortType, \"");
      out.print(searchAsync);
      out.write("\", function(list) {\n");
      out.write("			$pager.setPage(offset, list.length, null);\n");
      out.write("			// listのサイズを表示件数設定に従い補正\n");
      out.write("			if (list.length > limit) {\n");
      out.write("				list = list.slice(0, limit);\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			if (searchAsync) {\n");
      out.write("				// 検索後にボタン行を表示する\n");
      out.write("				entityListLink.show();\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			grid.clearGridData(true);\n");
      out.write("			grid.setGridParam({\"_data\": list}).trigger(\"reloadGrid\");\n");
      out.write("\n");
      out.write("			var $viewLink = $(\"<a/>\").attr({\"href\":\"javascript:void(0)\", \"action\":\"");
      out.print(StringUtil.escapeJavaScript(viewAction));
      out.write("\", \"title\":\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.detail')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("\"})\n");
      out.write("					.addClass(\"detailLink\").text(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.detail')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("\");\n");
	if (!section.isHideDetailLink() && (canUpdate || canDelete)) {
		//編集表示

      out.write("\n");
      out.write("			$viewLink.addClass(\"jqborder\"); //真ん中の棒線\n");
      out.write("			var $editLink = $(\"<a/>\").attr({\"href\":\"javascript:void(0)\", \"action\":\"");
      out.print(StringUtil.escapeJavaScript(detailAction));
      out.write("\", \"title\":\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.edit')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("\"})\n");
      out.write("					.addClass(\"detailLink editLink\").text(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs('mtp-gem-messages', 'generic.element.section.SearchResultSection.edit')}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("\");\n");

	} else {
		//編集非表示

      out.write("\n");
      out.write("			var $detailLink = $(\"<p/>\");\n");
      out.write("			$viewLink.appendTo($detailLink);\n");

	}

      out.write("\n");
      out.write("			$(list).each(function(index) {\n");
      out.write("				this[\"searchResultDataId\"] = this.orgOid + \"_\" + this.orgVersion;\n");
      out.write("\n");
      out.write("				$viewLink.attr({\"oid\":this.orgOid, \"version\":this.orgVersion});\n");
	if (!section.isHideDetailLink() && (canUpdate || canDelete)) { 
      out.write("\n");
      out.write("\n");
      out.write("				$editLink.attr({\"oid\":this.orgOid, \"version\":this.orgVersion});\n");
      out.write("\n");
      out.write("				var $detailLink = $(\"<p/>\");\n");
      out.write("				if (this[\"@canEdit\"] === \"false\" && this[\"@canDelete\"] === \"false\") {\n");
      out.write("					$viewLink.removeClass(\"jqborder\");\n");
      out.write("					$viewLink.appendTo($detailLink);\n");
      out.write("				} else {\n");
      out.write("					$viewLink.addClass(\"jqborder\"); //真ん中の棒線\n");
      out.write("					$viewLink.appendTo($detailLink);\n");
      out.write("					$editLink.appendTo($detailLink);\n");
      out.write("				}\n");
	} 
      out.write("\n");
      out.write("				this[\"_mtpDetailLink\"] = $detailLink.html();\n");
      out.write("				grid.addRowData(index + 1, this);\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			var option = {\n");
      out.write("				\"");
      out.print(Constants.BACK_PATH);
      out.write('"');
      out.write(':');
      out.write('"');
      out.print(MenuCommand.ACTION_NAME);
      out.write("\"\n");
      out.write("				,\"");
      out.print(Constants.TOPVIEW_LIST_OFFSET);
      out.write("\":idname + \".\" + offset\n");
      out.write("			};\n");
      out.write("			$(\".detailLink\", $table).click(function(e) {\n");
      out.write("				var action = $(this).attr(\"action\");\n");
      out.write("				var oid = $(this).attr(\"oid\");\n");
      out.write("				var version = $(this).attr(\"version\");\n");
      out.write("				var isEdit = $(this).is(\".editLink\");\n");
      out.write("				if (e.ctrlKey) {\n");
      out.write("					showDetail(action, oid, version, isEdit, \"_blank\", option);\n");
      out.write("				} else {\n");
      out.write("					showDetail(action, oid, version, isEdit, null, option);\n");
      out.write("				}\n");
      out.write("				return false;\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			var isSubModal = $(\"body.modal-body\").length != 0;\n");
      out.write("			if (isSubModal) {\n");
      out.write("				var a = $(\"#searchResult_");
      out.print(id);
      out.write(" .modal-lnk\");\n");
      out.write("				a.subModalWindow();\n");
      out.write("			} else {\n");
      out.write("				var a = $(\"#searchResult_");
      out.print(id);
      out.write(" .modal-lnk\");\n");
      out.write("				a.modalWindow();\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			$(\"#topview-parts-id_");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${partsCnt}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\").show();\n");
      out.write("			$(\".fixHeight\").fixHeight();\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("<ul class=\"link-list-01 entity-list\">\n");
      out.write("<li class=\"list-paging\">\n");
      out.write("<div class=\"result-nav\"></div>\n");
      out.write("</li>\n");
      out.write("<li class=\"list-all\"><a href=\"javascript:void(0)\" onclick='submitForm(\"");
      out.print(StringUtil.escapeJavaScript(action));
      out.write('"');
      out.write(',');
      out.write(' ');
      out.print(params);
      out.write(')');
      out.write('\'');
      out.write('>');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${m:rs(\"mtp-gem-messages\", \"generic.search.list.showSearch\")}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_1));
      out.write("</a></li>\n");
      out.write("</ul>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
